--// Coc rewrite of Dunin ammo aggregation by Nuor

local ammo	= {}					--repack ammo table

function on_game_start()
	RegisterScriptCallback("actor_on_item_take", actor_on_item_take)
	RegisterScriptCallback("actor_on_update", actor_on_update)
end

--------
-- flag ammo repack by the addition of cartridges to inventory
--------
function actor_on_item_take(obj)
	if not (obj:clsid() == clsid.wpn_ammo_s or obj:clsid() == clsid.wpn_ammo) then return end
	local section = obj:section()
	local box_size = system_ini():r_u32(section, "box_size")
	local size = get_ammo_size(obj)
	if size == box_size then return end
	ammo = ammo or {}
	if not ammo[section] then
		ammo[section] = box_size
	end
end

--------
-- Update called from actor update triggers the repackaging process
--------
function actor_on_update()
	if ammo then
		for section, size in pairs(ammo) do
			repack_ammo(section, size)
			ammo[section] = nil
		end
	end
end

--------
-- Repackaging of a given type of ammunition
-- Section - string section name (type of cartridge)
-- Box_size - size of a full pack
-- Make the list of incomplete packets, delete them and create the desired number full packets
--------
function repack_ammo(section, box_size)
	local s, t = enum_ammo(section, box_size)
	if s > 0 and #t > 1 then
		local sim = alife()
		local pos = db.actor:position()
		local lvid = db.actor:level_vertex_id()
		local gvid = db.actor:game_vertex_id()
		local pid = db.actor:id()

		for _,id in ipairs(t) do
			sim:release(sim:object(id), true)
		end

		while s >= box_size do
			s = s - box_size
			sim:create_ammo(section, pos, lvid, gvid, pid, box_size)
		end

		if s > 0 then
			sim:create_ammo(section, pos, lvid, gvid, pid, s)
		end
	end
end

--------
-- iterate inventory and collect incomplete packets
-- Section - string section name (type of cartridge)
-- Box_size - size of a full packet
-- returns total number cartridges and array of ids of current packets
--------
function enum_ammo(section, box_size)
	local s = 0
	local t = {}
	db.actor:inventory_for_each(
		function (item)
			if item:section() == section then
				local size = get_ammo_size(item)
				if size < box_size then
					table.insert(t, item:id())
					s = s + size
				end
			end
		end
	)
	return s, t
end

--------
-- returns number of cartridges in a bundle
--------
function get_ammo_size(obj)
	local s_obj = alife():object(obj:id())
	local t = s_obj and stpk_utils.get_object_data(s_obj)
	return t and t.ammo_left or 0
end
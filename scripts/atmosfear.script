--------------------------------------------------------------------------------
-- AtmosFear class and functions -----------------------------------------------
-- Made by Cromm Cruac ---------------------------------------------------------
-- for AtmosFear 3 -------------------------------------------------------------
-- 25.06.2011 ------------------------------------------------------------------
-- modified by Alundaio
	-- added INI support
	-- valid levels auto-detected
--------------------------------------------------------------------------------
local AtmosFear = nil

class "CAtmosFear"
function CAtmosFear:__init()
	self.aspectRatio = 1
	if(device().width/device().height>(1024/768+0.01)) then
		self.aspectRatio = 0.8
	end
	--self.debugMessages=debug_ui.get_debug_ui():create_elements(20)

	self.valid_levels = {}
	
	local gini = game_ini()
	local sim,gg = alife(),game_graph()
	local weather
	
	if (sim and gg) then  -- alife simulator started
		local level_name
		for level in gg:levels() do
			level_name = sim:level_name(level.id)
			weather = level_name and alun_utils.read_from_ini(gini,level_name,"weathers","string")
			if (weather == "atmosfear") then
				self.valid_levels[level_name] = true
			end
		end
	else 	-- alife simulation not started
		local levels = alun_utils.collect_section(gini,"level_maps_single")
		for i=1,#levels do
			weather = alun_utils.read_from_ini(gini,levels[i],"weathers","string")
			if (weather == "atmosfear") then
				self.valid_levels[levels[i]] = true
			end
		end
	end
	
	self.ini = alun_utils.cfg_file(alun_utils.fspath("$game_data$").."atmosfear_options.ini")
	if not (self.ini:SectionExist("atmosfear_current_parameters")) then
		self:loadDefaultParameters()
		self.ini:Save()
	end
	--self.debugMessages[18]:SetText("aspectRatio="..tostring(self.aspectRatio))
end

function CAtmosFear:initialize()
	--self.fallout_manager = fallout_manager.get_fallout_manager()
	--self.psi_storm_manager = psi_storm_manager.get_psi_storm_manager()
end

function CAtmosFear:update()
	local ini = system_ini()
	-- DRUG PROTECTIONS CHECK
	local g_time=CTimeToSec(game.get_game_time())
	local expiration = xr_logic.pstor_retrieve(db.actor,"drug_psy_blockade_expiration")
	if expiration~=nil then
		if g_time<expiration then
			self.drug_telepatic_protection = ini:r_float("drug_psy_blockade","boost_telepat_protection")
		else
			self.drug_telepatic_protection = nil
		end
	end
	expiration = xr_logic.pstor_retrieve(db.actor,"drug_radioprotector_expiration")
	if expiration~=nil then
		if g_time<expiration then
			self.drug_radiation_protection = ini:r_float("drug_radioprotector","boost_radiation_protection")
		else
			self.drug_radiation_protection = nil
		end
	end
	expiration = xr_logic.pstor_retrieve(db.actor,"drug_antidot_expiration")
	if expiration~=nil then
		if g_time<expiration then
			self.drug_chemical_burn_protection = ini:r_float("drug_antidot","boost_chemburn_protection")
		else
			self.drug_chemical_burn_protection = nil
		end
	end

end

function CAtmosFear:hit_power(power,hit_type)
	local hit_types={"burn", "shock", "chemical_burn", "radiation", "telepatic"}
	local suit_factors={10,1,5,33,10}
	local drug_factors={1,1,5,33,10}
	local artefact_factors={10,5,10,10,10}

	local suit_protection = db.actor:get_current_outfit_protection(hit_type)*suit_factors[hit_type+1]
	local helmet_protection = 0
	local helmet = db.actor:item_in_slot(12)
	if helmet ~= nil then
		helmet_protection = system_ini():r_float(helmet:section(),hit_types[hit_type+1].."_protection")*suit_factors[hit_type+1]
	end

	local drug_protection = 0
	if hit_type == 2 and self.drug_chemical_burn_protection ~= nil then
		drug_protection=self.drug_chemical_burn_protection*drug_factors[hit_type+1]
	elseif hit_type == 3 and self.drug_radiation_protection ~= nil then
		drug_protection=self.drug_radiation_protection*drug_factors[hit_type+1]
	elseif hit_type == 4 and self.drug_telepatic_protection ~= nil then
		drug_protection=self.drug_telepatic_protection*drug_factors[hit_type+1]
	end
	protection = (suit_protection + helmet_protection + drug_protection)
	if protection > 1 then
		protection = 1
	end
	hit_power=power*(1-protection)
	--self.debugMessages[5]:SetText("suit_protection="..tostring(suit_protection))
	--self.debugMessages[6]:SetText("helmet_protection="..tostring(helmet_protection))
	--self.debugMessages[7]:SetText("drug_protection="..tostring(drug_protection))
	--self.debugMessages[8]:SetText("protection="..tostring(protection))
	--self.debugMessages[9]:SetText("hit power ("..tostring(hit_types[hit_type+1])..")="..tostring(hit_power))
	--self.debugMessages[11]:SetText("gametime="..tostring(CTimeToSec(game.get_game_time())))
	--self.debugMessages[12]:SetText("expiration set to="..tostring(xr_logic.pstor_retrieve(db.actor,"drug_psy_blockade_expiration")))
	return hit_power
end

function CAtmosFear:loadDefaultParameters()
	for level,v in pairs(self.valid_levels) do
		self.ini:SetValue("atmosfear_current_parameters","opt_"..level.."_period_good",random_choice("clear","clear_foggy","foggy","foggy_rainy","rainy","stormy"))
		self.ini:SetValue("atmosfear_current_parameters","opt_"..level.."_period_bad",random_choice("clear","clear_foggy","foggy","foggy_rainy","rainy","stormy"))
		self.ini:SetValue("atmosfear_current_parameters","opt_"..level.."_period_good_length",random_choice(4,6,8))
		self.ini:SetValue("atmosfear_current_parameters","opt_"..level.."_period_bad_length",random_choice(4,6,8))
	end

	self.ini:SetValue("atmosfear_current_parameters","opt_enable_blowout",1)
	self.ini:SetValue("atmosfear_current_parameters","opt_blowout_freq",48)
	self.ini:SetValue("atmosfear_current_parameters","opt_blowout_fate","turntozombie")
	self.ini:SetValue("atmosfear_current_parameters","opt_blowout_warning","radio_siren")
	self.ini:SetValue("atmosfear_current_parameters","opt_blowout_task","give")
	self.ini:SetValue("atmosfear_current_parameters","opt_enable_fallout",1)
	self.ini:SetValue("atmosfear_current_parameters","opt_fallout_freq",12)
	self.ini:SetValue("atmosfear_current_parameters","opt_fallout_fate","poison")
	self.ini:SetValue("atmosfear_current_parameters","opt_fallout_warning","siren")
	self.ini:SetValue("atmosfear_current_parameters","opt_fallout_task","give")
	self.ini:SetValue("atmosfear_current_parameters","opt_enable_psi_storm",1)
	self.ini:SetValue("atmosfear_current_parameters","opt_psi_storm_freq",24)
	self.ini:SetValue("atmosfear_current_parameters","opt_psi_storm_fate","kill")
	self.ini:SetValue("atmosfear_current_parameters","opt_psi_storm_warning","siren")
	self.ini:SetValue("atmosfear_current_parameters","opt_psi_storm_task","give")

	self.ini:SetValue("atmosfear_current_parameters","opt_moon_phase","8days")
	self.ini:SetValue("atmosfear_current_parameters","opt_night_brightness","slight")

	self.ini:SetValue("atmosfear_current_parameters","opt_weather_balance_presets","balance_default")
	self.ini:SetValue("atmosfear_current_parameters","opt_weather_length_presets","length_default")

	self.ini:SetValue("atmosfear_current_parameters","opt_god_mode","false")
end

function CAtmosFear:loadDefaultConsoleSettings()
	local console=get_console()
	console:execute("r2_dof_far 800")
	console:execute("r2_aa off")
	console:execute("r2_allow_r1_lights off")
	console:execute("r2_dof -0.400000,1.400000,500.000000")
	console:execute("r2_dof_enable on")
	console:execute("r2_dof_kernel 2.")
	console:execute("r2_dof_sky 0.")
	console:execute("r2_exp_donttest_shad off")
	console:execute("r2_gi off")
	console:execute("r2_ls_bloom_fast off")
	console:execute("r2_sun on")
	console:execute("r2_sun_depth_far_bias -0.00002")
	console:execute("r2_sun_depth_far_scale 1.")
	console:execute("r2_sun_depth_near_bias 0.00007")
	console:execute("r2_sun_depth_near_scale 1.")
	console:execute("r2_sun_details on")
	console:execute("r2_sun_far 180.")
	console:execute("r2_sun_focus on")
	console:execute("r2_sun_lumscale 1.")
	console:execute("r2_sun_lumscale_amb 0.1")
	console:execute("r2_sun_lumscale_hemi 0.6")
	console:execute("r2_sun_near 30.")
	console:execute("r2_sun_near_border 0.75")
	console:execute("r2_sun_quality st_opt_high")
	console:execute("r2_sun_shafts st_opt_low")
	console:execute("r2_sun_tsm on")
	console:execute("r2_sun_tsm_bias -0.01")
	console:execute("r2_sun_tsm_proj 0.3")
	console:execute("r2_tf_mipbias 0.")
	console:execute("r2_tonemap on")
	console:execute("r2_tonemap_adaptation 0.2")
	console:execute("r2_tonemap_amount 1.")
	console:execute("r2_tonemap_lowlum 0.4")
	console:execute("r2_tonemap_middlegray 1.1")
	console:execute("rs_c_brightness 1.")
	console:execute("rs_c_contrast 1.")
	console:execute("rs_c_gamma 1.")
end

function str_to_bool(str)
	if str=="true" then
		return true
	elseif str=="false" then
		return false
	else
		return nil
	end
end

function CTimeToSec(ctime)
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = ctime:get(Y, M, D, h, m, s, ms)
	return D*24*60*60 + h*60*60 + m*60 + s
end

function CTimeAddSec(ctime,sec)
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = ctime:get(Y, M, D, h, m, s, ms)
	return D*24*60*60 + h*60*60 + m*60 + s + sec
end

function get_atmosfear()
	if AtmosFear == nil then
		AtmosFear = CAtmosFear()
	end
	return AtmosFear
end


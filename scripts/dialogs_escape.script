--=============================================================
--
-- FUNCTIONS FOR DIALOGS ON ESCAPE (CORDON) MAP
--	CoC 1.3.11
--
--	Modified by: DoctorX
--	Last revised: March 18, 2016
--
--=============================================================


-- ------------------------------------------------------------------------------------------------
-- FANATIC-


function esc_2_12_stalker_fanat_about_quest(a,b)
	local npc = dialogs.who_is_npc(a,b)
	if (npc:has_info("npcx_is_companion") == true) then
		return false
	end

	return xr_conditions.has_task_not_completed(nil,nil,{"esc_m_trader_task_1"})
end


function actor_dont_has_esc_m_trader_task_2(a,b)
	return not xr_conditions.has_task_not_completed(nil,nil,{"esc_m_trader_task_1"})
end


function actor_has_esc_m_trader_task_2(a,b)
	return xr_conditions.has_task_not_completed(nil,nil,{"esc_m_trader_task_1"})
end


function set_esc_2_12_stalker_fanat_as_companion(a,b)
	local npc = dialogs.who_is_npc(a,b)
	local squad = get_object_squad(npc)
	if not (squad) then
		return
	end
	for k in squad:squad_members() do
		local npc = k.id and (db.storage[k.id] and db.storage[k.id].object or level.object_by_id(k.id))
		if (npc) then
			utils.se_obj_save_var(k.id,k.object:name(),"companion",true)
			utils.se_obj_save_var(k.id,k.object:name(),"companion_cannot_dismiss",true)
			utils.se_obj_save_var(k.id,k.object:name(),"companion_cannot_teleport",true)
			axr_companions.setup_companion_logic(npc,db.storage[k.id],false,true)
		end
	end
end


-- ------------------------------------------------------------------------------------------------
-- NIMBLE-


function actor_has_mar_base_owl_stalker_trader_task_1_pda(a,b)
	return db.actor:object("mar_base_owl_stalker_trader_task_1_pda") ~= nil or false
end


function actor_dont_has_mar_base_owl_stalker_trader_task_1_pda(a,b)
	return db.actor:object("mar_base_owl_stalker_trader_task_1_pda") == nil or false
end


function mar_base_owl_stalker_trader_task_1_give_reward(a,b)
	--esc_2_12_stalker_nimble_mar_base_owl_stalker_trader_task_1
	local itm = db.actor:object("mar_base_owl_stalker_trader_task_1_pda")
	local npc = dialogs.who_is_npc(a,b)
	dialogs.relocate_item_section(npc, "mar_base_owl_stalker_trader_task_1_pda", "out", 1)
	if (itm) then
		local sim = alife()
		local se_itm = sim:object(itm:id())
		sim:release(se_itm, true)
	end
	dialogs.relocate_money_to_actor(a,b,300)
	task_manager.get_task_manager():set_task_completed("mar_base_owl_stalker_trader_task_1")
	xr_effects.inc_faction_goodwill_to_actor(db.actor, nil, {"csky", 50})
	xr_effects.inc_faction_goodwill_to_actor(db.actor, nil, {"stalker", 50})
end


------------------------------------------------------------------------------
item_count_by_category = {}
item_count_by_category[1] = 3
item_count_by_category[2] = 3
item_count_by_category[3] = 3
item_count_by_category[4] = 3
item_count_by_category[5] = 1
item_count_by_category[6] = 1
item_count_by_category[7] = 1

esc_2_12_costs_table = {}
esc_2_12_costs_table[1] = {prepay_agreed = 700, 		prepay_refused = 1400,	cost = 2800}
esc_2_12_costs_table[2] = {prepay_agreed = 2000, 	prepay_refused = 4000,	cost = 8000}
esc_2_12_costs_table[3] = {prepay_agreed = 4000, 	prepay_refused = 8000,	cost = 16000}
esc_2_12_costs_table[4] = {prepay_agreed = 4000, 	prepay_refused = 8000,	cost = 16000}
esc_2_12_costs_table[5] = {prepay_agreed = 8000, 	prepay_refused = 16000,	cost = 32000}
esc_2_12_costs_table[6] = {prepay_agreed = 6000, 	prepay_refused = 12000,	cost = 24000}
esc_2_12_costs_table[7] = {prepay_agreed = 12000,	prepay_refused = 24000,	cost = 48000}

esc_2_12_buy_item_table = {}
esc_2_12_buy_item_table[1] = {		[1] = {item = {"wpn_desert_eagle_nimble"}},
									[2] = {item = {"wpn_sig220_nimble"}},
									[3] = {item = {"wpn_usp_nimble"}}
	}
esc_2_12_buy_item_table[2] = {		[1] = {item = {"wpn_mp5_nimble"}},
								[2] = {item = {"wpn_spas12_nimble"}},
								[3] = {item = {"wpn_protecta_nimble"}}
	}
esc_2_12_buy_item_table[3] = {		[1] = {item = {"wpn_groza_nimble"}},
								[2] = {item = {"wpn_g36_nimble"}},
								[3] = {item = {"wpn_fn2000_nimble"}}
	}
esc_2_12_buy_item_table[4] = {	[1] = {item = {"wpn_vintorez_nimble"}},
								[2] = {item = {"wpn_svu_nimble"}},
								[3] = {item = {"wpn_svd_nimble"}}
	}
esc_2_12_buy_item_table[5] = {		[1] = {item = {"helm_hardhat", "cs_heavy_outfit"}}
	}
esc_2_12_buy_item_table[6] = {		[1] = {item = {"scientific_outfit"}}
	}
esc_2_12_buy_item_table[7] = {		[1] = {item = {"exo_outfit"}}
	}


function esc_2_12_randomize_item(first_speaker, second_speaker)
	for i = 1,7 do
		if has_alife_info("esc_2_12_processing_category_"..tostring(i)) then
			local esc_2_12_available_items_table = {}
			for j = 1, item_count_by_category[i] do
				if not has_alife_info("esc_2_12_done_item_"..tostring(i).."_"..tostring(j)) then
					table.insert(esc_2_12_available_items_table, j)
				end
			end
			give_info("esc_2_12_ordered_item_"..tostring(i).."_"..tostring(esc_2_12_available_items_table[math.random(1,#esc_2_12_available_items_table)]))
		end
	end
end


function esc_2_12_give_prepay(first_speaker, second_speaker)
	for i = 1,7 do
		if has_alife_info("esc_2_12_processing_category_"..tostring(i))  then
			if not has_alife_info("esc_2_12_order_refused") then
				dialogs.relocate_money_from_actor(first_speaker, second_speaker, esc_2_12_costs_table[i].prepay_agreed)
				return
			end
			dialogs.relocate_money_from_actor(first_speaker, second_speaker, esc_2_12_costs_table[i].prepay_refused)
			return
		end
	end
end


function esc_2_12_has_prepay(first_speaker, second_speaker)
	for i = 1,7 do
		if has_alife_info("esc_2_12_processing_category_"..tostring(i))  then
			if not has_alife_info("esc_2_12_order_refused") then
				return db.actor:money() >= esc_2_12_costs_table[i].prepay_agreed
			end
			return db.actor:money() >= esc_2_12_costs_table[i].prepay_refused
		end
	end
end


function esc_2_12_hasnt_prepay(first_speaker, second_speaker)
	return not esc_2_12_has_prepay(first_speaker, second_speaker)
end


function esc_2_12_buy_item(first_speaker, second_speaker)
	for i = 1,7 do
		if has_alife_info("esc_2_12_processing_category_"..tostring(i)) then
			for j = 1,#esc_2_12_buy_item_table[i] do
				if has_alife_info("esc_2_12_ordered_item_"..tostring(i).."_"..tostring(j)) then
					for k,v in pairs(esc_2_12_buy_item_table[i][j].item) do
						dialogs.relocate_item_section_to_actor(first_speaker, second_speaker,v)
					end
					dialogs.relocate_money_from_actor(first_speaker, second_speaker, esc_2_12_costs_table[i].cost)
					disable_info("esc_2_12_processing_category_"..tostring(i))
					disable_info("esc_2_12_ordered_item_"..tostring(i).."_"..tostring(j))
					give_info("esc_2_12_done_item_"..tostring(i).."_"..tostring(j))
					break
				end
			end
			local category_finishing = true
			for j = 1,#esc_2_12_buy_item_table[i] do
				if not has_alife_info("esc_2_12_done_item_"..tostring(i).."_"..tostring(j)) then
					category_finishing = false
					break
				end
			end
			if category_finishing == true then
				give_info("esc_2_12_finishing_category_"..tostring(i))
			end
			return
		end
	end
end


function esc_2_12_refuse_item(first_speaker, second_speaker)
	for i = 1,7 do
		if has_alife_info("esc_2_12_processing_category_"..tostring(i)) then
			for j = 1,#esc_2_12_buy_item_table[i] do
				if has_alife_info("esc_2_12_ordered_item_"..tostring(i).."_"..tostring(j)) then
					disable_info("esc_2_12_processing_category_"..tostring(i))
					disable_info("esc_2_12_ordered_item_"..tostring(i).."_"..tostring(j))
					give_info("esc_2_12_done_item_"..tostring(i).."_"..tostring(j))
					break
				end
			end
			local category_finishing = true
			for j = 1,#esc_2_12_buy_item_table[i] do
				if not has_alife_info("esc_2_12_done_item_"..tostring(i).."_"..tostring(j)) then
					category_finishing = false
					break
				end
			end
			if category_finishing == true then
				give_info("esc_2_12_finishing_category_"..tostring(i))
			end
			return
		end
	end
end


function esc_2_12_has_item_cost(first_speaker, second_speaker)
	for i = 1,7 do
		if has_alife_info("esc_2_12_processing_category_"..tostring(i)) then
			return db.actor:money() >= esc_2_12_costs_table[i].cost
		end
	end
	return false
end

function esc_2_12_hasnt_item_cost(first_speaker, second_speaker)
	return not esc_2_12_has_item_cost(first_speaker, second_speaker)
end

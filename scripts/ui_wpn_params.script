function normalize(val, min, max)
	local d = 100*(val-min)/(max-min)
	if d < 0 then
		return 0
	end
	return d
end

function normalizeMP(val)
	if val > 100 then
		val = 100
	elseif val < 1 then
		val  = 1
	end
	
	return val
end

function read_if_exist(section, value, default)
    local ltx = system_ini()
    if ltx:section_exist(section) and ltx:line_exist(section,value) then
		return ltx:r_float_ex(section,value)
	else
		return default
	end
end

function read_float(wpn_section, upgr_sections, param,def)
	local ltx = system_ini()
	local res = 0
	
	if (param == "hit_power") then 
		local t = parse_names(ltx:r_string_ex(wpn_section,param) or "")
		res = tonumber(t[1]) or def
	else
		res = ltx:r_float_ex(wpn_section, param) or def
	end 
	
	if upgr_sections == nil or upgr_sections == "" then
        return res
    end
	
	for k, sect in pairs(parse_names(upgr_sections)) do
		if param == "hit_power" then
			local r = parse_names(ltx:r_string_ex(sect,param) or "")
			r = tonumber(r[1]) or def
			if res < r then
				res = r
			end
		else
			res = res + (ltx:r_float_ex(sect,param) or def)
		end		
    end 
	
    return res
end

function GetRPM(wpn_section, upgr_sections) --' скорострельность
	local rpm = read_float(wpn_section, upgr_sections, "rpm",0)
	return normalize(rpm, 0, 1000)
end

function GetDamage(wpn_section, upgr_sections) --' повреждение
	local hit_power = read_float(wpn_section, upgr_sections, "hit_power",0)
	return normalize(hit_power, 0, 1)
end

function GetDamageMP(wpn_section, upgr_sections) -- ??? (повреждениеMP)
	local hit_power = read_float(wpn_section, upgr_sections, "hit_power",0)
	hit_power = hit_power * 100	
	-- if val < 1.05 then
		-- val = val*100-30
	-- else
		-- val = 75 + math.pow(val/4,2)*25
	-- end	
	return normalizeMP(hit_power)	
end

function GetHandling(wpn_section, upgr_sections) --' удобность
	local PDM_disp_base = read_float(wpn_section, upgr_sections, "PDM_disp_base",0)
	local control_inertion_factor = read_float(wpn_section, upgr_sections, "control_inertion_factor",1)
	return (normalize(PDM_disp_base, 2.1, 0) + normalize(control_inertion_factor, 2.2, 1))/2
end

function GetAccuracy(wpn_section, upgr_sections) --' точность
    local fire_dispersion_base	= read_float(wpn_section, upgr_sections, "fire_dispersion_base",0)
	return normalize(fire_dispersion_base, 1.5, 0)
end

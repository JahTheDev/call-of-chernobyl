local trade_manager = {}

function trade_init(npc, cfg)
	local id = npc:id()
	trade_manager[id] = {}
	trade_manager[id].cfg_ltx = cfg
	trade_manager[id].config = ini_file(cfg)
	if not (trade_manager[id].config) then
		trade_manager[id] = nil
	end
end


function update(npc)
	if not (npc:alive()) then 
		return 
	end
	
	local tt = trade_manager[npc:id()]
	if (tt == nil or tt.config == nil) then
		--printf("TRADE [%s]:  tt is nil", npc:name())
		return
	end

	local tg = time_global()
	if tt.update_time and tt.update_time < tg then
		return
	end
	tt.update_time = tg + 120000

	local condlist = xr_logic.parse_condlist(npc, "trader", "buy_condition", utils.cfg_get_string(tt.config, "trader", "buy_condition", npc, true, "",""))
	local str = condlist and xr_logic.pick_section_from_condlist(db.actor, npc, condlist)
	if(str == nil or str == "") then
		printf("Wrong section in buy_condition condlist for npc [%s]!", npc:name())
		return
	end
	
	if tt.current_buy_condition == nil or tt.current_buy_condition ~= str then
		--'printf("TRADE [%s]: buy condition = %s", npc:name(), str)
		npc:buy_condition(tt.config, str)
		tt.current_buy_condition = str
	end

	condlist = xr_logic.parse_condlist(npc, "trader", "sell_condition", utils.cfg_get_string(tt.config, "trader", "sell_condition", npc, true, "",""))
	str = condlist and xr_logic.pick_section_from_condlist(db.actor, npc, condlist)
	if(str == nil or str == "") then
		printf("Wrong section in sell_condition condlist for npc [%s]!", npc:name())
		return
	end
	if (tt.current_sell_condition == nil or tt.current_sell_condition ~= str) then
		--printf("TRADE [%s]: sell condition = %s", npc:name(), str)
		npc:sell_condition(tt.config, str)
		tt.current_sell_condition = str
	end

	condlist = xr_logic.parse_condlist(npc, "trader", "buy_item_condition_factor", utils.cfg_get_string(tt.config, "trader", "buy_item_condition_factor", npc, false, "", "0.7"))
	str = condlist and xr_logic.pick_section_from_condlist(db.actor, npc, condlist)
	if (str == nil or str == "") then
		printf("Wrong section in buy_item_condition_factor condlist for npc [%s]!", npc:name())
		return 
	end
	str = tonumber(str)
	if (tt.current_buy_item_condition_factor == nil or tt.current_buy_item_condition_factor ~= str) then
		npc:buy_item_condition_factor(str)
		tt.current_buy_item_condition_factor = str
	end

	str = utils.cfg_get_string(tt.config, "trader", "buy_supplies", npc, true, "")
	if not (str) then 
		return -- no buy_supplies this is normal
	end

	condlist = xr_logic.parse_condlist(npc, "trader", "buy_supplies", str)
	str = condlist and xr_logic.pick_section_from_condlist(db.actor, npc, condlist)
	if(str=="" or str==nil) then
		printf("Wrong section in buy_supplies condlist for npc [%s]!", npc:name())
		return
	end
	if (tt.current_buy_supplies == nil or tt.current_buy_supplies ~= str) then
		npc:buy_supplies(tt.config, str)
		tt.current_buy_supplies = str
	end
end

function on_npc_death(npc)
	if (npc) then
		trade_manager[npc:id()] = nil
	end
end

function save_state(m_data,npc)
	if not (npc:alive()) then 
		return 
	end
	
	local id = npc:id()
	local tt = trade_manager[id]
	if not (tt) then 
		return 
	end
	
	if not (utils.valid_pathname(tt.cfg_ltx)) then 
		printf("ERROR: trade_manager: Invalid pathname %s.",tt.cfg_ltx)
		return
	end
	
	m_data.trade_manager[id] = {}
	m_data.trade_manager[id].cfg_ltx = tt.cfg_ltx
	m_data.trade_manager[id].current_buy_condition = tt.current_buy_condition
	m_data.trade_manager[id].current_sell_condition = tt.current_sell_condition
	m_data.trade_manager[id].current_buy_supplies = tt.current_buy_supplies
	m_data.trade_manager[id].resupply_time = tt.resupply_time
end 

function load_state(m_data,npc)
	local id = npc:id()
	if not (m_data.trade_manager and m_data.trade_manager[id] and m_data.trade_manager[id].cfg_ltx) then 
		return 
	end
	if not (npc:alive()) then 
		return 
	end
	trade_manager[id] = trade_manager[id] or {}
	trade_manager[id].cfg_ltx = m_data.trade_manager[id].cfg_ltx
	trade_manager[id].config = ini_file(trade_manager[id].cfg_ltx)
	if not (trade_manager[id].config) then 
		printf("ERROR: trade_manager: Invalid pathname %s.",tt.cfg_ltx)
		return
	end
	trade_manager[id].current_buy_condition = m_data.trade_manager[id].current_buy_condition
	trade_manager[id].current_sell_condition = m_data.trade_manager[id].current_sell_condition
	trade_manager[id].current_buy_supplies = m_data.trade_manager[id].current_buy_supplies
	trade_manager[id].resupply_time = m_data.trade_manager[id].resupply_time or game.get_game_time()
	
	if (trade_manager[id].current_buy_condition and trade_manager[id].current_sell_condition) then
		npc:buy_condition(trade_manager[id].config, trade_manager[id].current_buy_condition)
		npc:sell_condition(trade_manager[id].config, trade_manager[id].current_sell_condition)
	
		trade_manager[id].loaded = true
	else 
		trade_manager[id] = nil -- failed to load
	end
	
	m_data.trade_manager[id] = nil
end 


function save(obj, packet)
	local tt = trade_manager[obj:id()]
	if (tt == nil or not obj:alive()) then
		packet:w_bool(false)
		return
	end 
	if not (utils.valid_pathname(tt.cfg_ltx)) then 
		printf("ERROR: trade_manager: Invalid pathname %s.",tt.cfg_ltx)
		packet:w_bool(false)
		return
	else 
		packet:w_bool(true)
	end
	
	set_save_marker(packet, "save", false, "trade_manager")
		
	packet:w_stringZ(tt.cfg_ltx)
	packet:w_stringZ(tt.current_buy_condition or "")
	packet:w_stringZ(tt.current_sell_condition or "")
	packet:w_stringZ(tt.current_buy_supplies or "")

	local cur_tm = time_global()
	if tt.update_time == nil then
		packet:w_s32(-1)
	else
	 	packet:w_s32(tt.update_time - cur_tm)
	end

	if tt.resupply_time == nil then
		packet:w_s32(-1)
	else
	 	packet:w_s32(tt.resupply_time - cur_tm)
	end
	set_save_marker(packet, "save", true, "trade_manager")
end

function load(obj, packet)
	local a = packet:r_bool()
	if a == false then
		return
	end

	set_save_marker(packet, "load", false, "trade_manager")
	
	trade_manager[obj:id()] = {}

	local tt = trade_manager[obj:id()]

	tt.cfg_ltx = packet:r_stringZ()
	if not (utils.valid_pathname(tt.cfg_ltx)) then 
		-- save most likely corrupt
		trade_manager[obj:id()] = nil
		set_save_marker(packet, "load", true, "trade_manager")
		return
	end 
	
	tt.config = ini_file(tt.cfg_ltx)
	--printf("TRADE LOAD [%s]: cfg_ltx = %s", obj:name(), tostring(tt.cfg_ltx))

	a = packet:r_stringZ()
	--printf("TRADE LOAD [%s]: current_buy_condition = %s", obj:name(), tostring(a))
	if a ~= "" then
		tt.current_buy_condition = a
		obj:buy_condition(tt.config, a)
	end

	a = packet:r_stringZ()
	--printf("TRADE LOAD [%s]: current_sell_condition = %s", obj:name(), tostring(a))
	if a ~= "" then
		tt.current_sell_condition = a
		obj:sell_condition(tt.config, a)
	end

	a = packet:r_stringZ()
	--printf("TRADE LOAD [%s]: current_buy_supplies = %s", obj:name(), tostring(a))
	if a ~= "" then
		tt.current_buy_supplies = a
	end

	local cur_tm = time_global()

	a = packet:r_s32()
	if a ~= -1 then
		tt.update_time = cur_tm + a
	end

	a = packet:r_s32()
	if a ~= -1 then
		tt.resupply_time = cur_tm + a
	end
	
	if not (obj:alive()) then 
		trade_manager[obj:id()] = nil
	end
	set_save_marker(packet, "load", true, "trade_manager")
end
----------- NOT TO DELETE!!!!!!!!! called from engine
function get_buy_discount(npc_id)
	--alun_utils.debug_write("get_buy_discount")
	if not (trade_manager[npc_id]) then
		return 1
	end

	if not (trade_manager[npc_id].config) then 
		return 1 
	end 
	
	local str = utils.cfg_get_string(trade_manager[npc_id].config, "trader", "discounts", nil, false, "", "")
	if(str == nil or str=="") then
		return 1
	end

	local sect = xr_logic.pick_section_from_condlist(db.actor, nil, xr_logic.parse_condlist(nil, "trader", "discounts", str))
	if (sect == nil or sect == "") then 
		return 1 
	end
	str = utils.cfg_get_number(trade_manager[npc_id].config, sect, "buy", nil, false, 1)
	return str
end
----------- NOT TO DELETE!!!!!!!!! called from engine
function get_sell_discount(npc_id)
	--alun_utils.debug_write("get_sell_discount")
	if not (trade_manager[npc_id]) then
		return 1
	end

	if not (trade_manager[npc_id].config) then 
		return 1 
	end 
	
	local str = utils.cfg_get_string(trade_manager[npc_id].config, "trader", "discounts", nil, false, "", "")
	if(str == nil or str=="") then
		return 1
	end

	local sect = xr_logic.pick_section_from_condlist(db.actor, nil, xr_logic.parse_condlist(npc, "trade_manager", "discounts", str))
	if (sect == nil or sect == "") then 
		return 1 
	end
	
	str = utils.cfg_get_number(trade_manager[npc_id].config, sect, "sell", nil, false, 1)

	return str
end

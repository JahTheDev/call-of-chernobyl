local trade_manager = {}

function trade_init(npc, cfg)
	if not (utils.valid_pathname(cfg)) then 
		return 
	end
	trade_manager[npc:id()] = {}
	trade_manager[npc:id()].cfg_ltx = cfg
	trade_manager[npc:id()].config = ini_file(cfg)

	-- коэфициенты покупки
	local str = utils.cfg_get_string(trade_manager[npc:id()].config, "trader", "buy_condition", npc, true, "")
	if str == nil then
		printf("Incorrect trader settings. Cannot find buy_condition. [%s]->[%s]", npc:name(), cfg)
	end
	trade_manager[npc:id()].buy_condition = xr_logic.parse_condlist(npc, "trade_manager", "buy_condition", str)

	-- коэфициенты продажи
	str = utils.cfg_get_string(trade_manager[npc:id()].config, "trader", "sell_condition", npc, true, "")
	if str == nil then
		printf("Incorrect trader settings. Cannot find sell_condition. [%s]->[%s]", npc:name(), cfg)
	end
	trade_manager[npc:id()].sell_condition = xr_logic.parse_condlist(npc, "trade_manager", "sell_condition", str)

	-- список закупки
	str = utils.cfg_get_string(trade_manager[npc:id()].config, "trader", "buy_supplies", npc, false, "")
	if str ~= nil then
		trade_manager[npc:id()].buy_supplies = xr_logic.parse_condlist(npc, "trade_manager", "buy_supplies", str)
	end

-- buy_item_condition_factor
	str = utils.cfg_get_string(trade_manager[npc:id()].config, "trader", "buy_item_condition_factor", npc, false, "", "0.7")
	if str ~= nil then
		trade_manager[npc:id()].buy_item_condition_factor = xr_logic.parse_condlist(npc, "trade_manager", "buy_item_condition_factor", str)
	end
end


function update(npc)
	if not (npc:alive()) then 
		return 
	end
	
	local tt = trade_manager[npc:id()]
	if (tt == nil or tt.config == nil) then
		printf("TRADE [%s]:  tt is nil", npc:name())
		return
	end

	if (npc:is_talking()) then
		local n = tonumber(xr_logic.pick_section_from_condlist(db.actor, npc, tt.buy_item_condition_factor))
		tt.current_buy_item_condition_factor = n
		if (has_alife_info("scavenger_skill_tier_1")) then 
			if (n - 0.10 >= 0) then 
				n = n - 0.10
			else 
				n = 0
			end
		end 
		npc:buy_item_condition_factor(n)
	end 
	
	local tg = time_global()
	if tt.update_time ~= nil and tt.update_time < tg then
		return
	end
	
	if (db.actor and db.actor:has_info("actor_made_wish_for_riches")) then
		trade_manager[npc:id()] = nil
		return
	end
	
	if (tg + 360000 < 2147483647) then 
		tt.update_time = tg + 360000
	else 
		tt.update_time = 2147483646
	end

	local str = xr_logic.pick_section_from_condlist(db.actor, npc, tt.buy_condition)
	if(str=="" or str==nil) then
		printf("Wrong section in buy_condition condlist for npc [%s]!", npc:name())
	end
	if tt.current_buy_condition ~= str then
		--'printf("TRADE [%s]: buy condition = %s", npc:name(), str)
		npc:buy_condition(tt.config, str)
		tt.current_buy_condition = str
	end

	str = xr_logic.pick_section_from_condlist(db.actor, npc, tt.sell_condition)
	if(str=="" or str==nil) then
		printf("Wrong section in buy_condition condlist for npc [%s]!", npc:name())
	end
	if tt.current_sell_condition ~= str then
		--printf("TRADE [%s]: sell condition = %s", npc:name(), str)
		npc:sell_condition(tt.config, str)
		tt.current_sell_condition = str
	else
		--printf("TRADE [%s]: current = %s   sell = %s", npc:name(), tostring(tt.current_sell_condition), tostring(str))
	end

	str = xr_logic.pick_section_from_condlist(db.actor, npc, tt.buy_item_condition_factor)
	str = str and str ~= "" and tonumber(str)
	if str and tt.current_buy_item_condition_factor ~= str then
		npc:buy_item_condition_factor(str)
		tt.current_buy_item_condition_factor = str
	end

	if tt.buy_supplies == nil then
		return
	end

	str = xr_logic.pick_section_from_condlist(db.actor, npc, tt.buy_supplies)
	if(str=="" or str==nil) then
		printf("Wrong section in buy_condition condlist for npc [%s]!", npc:name())
	end
	if tt.current_buy_supplies ~= str then
		if tt.resuply_time ~= nil and tt.resuply_time < tg then
			return
		end
		--'printf("TRADE [%s]: buy_supplies = %s", npc:name(), str)
		npc:buy_supplies(tt.config, str)
		tt.current_buy_supplies = str
		if (tg + 86400000 < 2147483647) then
			tt.resuply_time = tg + 86400000
		else 
			tt.resuply_time = 2147483646
		end
	end
end

function on_npc_death(npc)
	if (npc) then
		trade_manager[npc:id()] = nil
	end
end

function save(obj, packet)
	local tt = trade_manager[obj:id()]
	if (tt == nil or not obj:alive()) then
		packet:w_bool(false)
		return
	end 
	if not (utils.valid_pathname(tt.cfg_ltx)) then 
		printf("ERROR: trade_manager: Invalid pathname %s.",tt.cfg_ltx)
		packet:w_bool(false)
		return
	else 
		packet:w_bool(true)
	end
	
	set_save_marker(packet, "save", false, "trade_manager")
		
	packet:w_stringZ(tt.cfg_ltx)
	packet:w_stringZ(tt.current_buy_condition or "")
	packet:w_stringZ(tt.current_sell_condition or "")
	packet:w_stringZ(tt.current_buy_supplies or "")

	local cur_tm = time_global()
	if tt.update_time == nil then
		packet:w_s32(-1)
	else
	 	packet:w_s32(tt.update_time - cur_tm)
	end

	if tt.resuply_time == nil then
		packet:w_s32(-1)
	else
	 	packet:w_s32(tt.resuply_time - cur_tm)
	end
	set_save_marker(packet, "save", true, "trade_manager")
end

function load(obj, packet)
	local a = packet:r_bool()
	if a == false then
		return
	end

	set_save_marker(packet, "load", false, "trade_manager")
	
	trade_manager[obj:id()] = {}

	local tt = trade_manager[obj:id()]

	tt.cfg_ltx = packet:r_stringZ()
	if not (utils.valid_pathname(tt.cfg_ltx)) then 
		-- save most likely corrupt
		trade_manager[obj:id()] = nil
		set_save_marker(packet, "load", true, "trade_manager")
		return
	end 
	
	tt.config = ini_file(tt.cfg_ltx)
	--printf("TRADE LOAD [%s]: cfg_ltx = %s", obj:name(), tostring(tt.cfg_ltx))

	a = packet:r_stringZ()
	--printf("TRADE LOAD [%s]: current_buy_condition = %s", obj:name(), tostring(a))
	if a ~= "" then
		tt.current_buy_condition = a
		obj:buy_condition(tt.config, a)
	end

	a = packet:r_stringZ()
	--printf("TRADE LOAD [%s]: current_sell_condition = %s", obj:name(), tostring(a))
	if a ~= "" then
		tt.current_sell_condition = a
		obj:sell_condition(tt.config, a)
	end

	a = packet:r_stringZ()
	--printf("TRADE LOAD [%s]: current_buy_supplies = %s", obj:name(), tostring(a))
	if a ~= "" then
		tt.current_buy_supplies = a
	end

	local cur_tm = time_global()

	a = packet:r_s32()
	if a ~= -1 then
		tt.update_time = cur_tm + a
	end

	a = packet:r_s32()
	if a ~= -1 then
		tt.resuply_time = cur_tm + a
	end
	
	if not (obj:alive()) then 
		trade_manager[obj:id()] = nil
	end
	set_save_marker(packet, "load", true, "trade_manager")
end
----------- NOT TO DELETE!!!!!!!!! called from engine
function get_buy_discount(npc_id)
	--alun_utils.debug_write("get_buy_discount")
	if not (trade_manager[npc_id]) then
		return 1
	end

	if not (trade_manager[npc_id].config) then 
		return 1 
	end 
	
	local str = utils.cfg_get_string(trade_manager[npc_id].config, "trader", "discounts", nil, false, "", "")
	if(str=="") then
		return 1
	end

	local sect = xr_logic.pick_section_from_condlist(db.actor, nil, xr_logic.parse_condlist(nil, "trade_manager", "discounts", str))
	str = utils.cfg_get_number(trade_manager[npc_id].config, sect, "buy", nil, false, 1)
		return str
end
----------- NOT TO DELETE!!!!!!!!! called from engine
function get_sell_discount(npc_id)
	--alun_utils.debug_write("get_sell_discount")
	if not (trade_manager[npc_id]) then
		return 1
	end

	if not (trade_manager[npc_id].config) then 
		return 1 
	end 
	
	local str = utils.cfg_get_string(trade_manager[npc_id].config, "trader", "discounts", nil, false, "", "")
	if(str=="") then
		return 1
	end

	local sect = xr_logic.pick_section_from_condlist(db.actor, nil, xr_logic.parse_condlist(npc, "trade_manager", "discounts", str))
	str = utils.cfg_get_number(trade_manager[npc_id].config, sect, "sell", nil, false, 1)

	return str
end

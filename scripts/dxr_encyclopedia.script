--------------------------------
----- Written by Darryl123 -----
--------------------------------

---------------------
----- Callbacks -----
---------------------

-- Initialises callbacks.
function on_game_start()
	RegisterScriptCallback("actor_on_item_use", on_item_use)
end

-- Called when an item is used.
function on_item_use(item)
	if (item:section() == "itm_guide_usb_1" or item:section() == "itm_guide_usb_2") then
		unlock_article()
	end
end

---------------------------
----- Context Options -----
---------------------------

-- Action performed by USB memory sticks.
function context_action_functor(item)
	local item_object = alife_object(item:id())
	alife():release(item_object, true)
	unlock_article()
end

-- Text displayed for USB memory sticks.
function context_functor(item)
	-- Return if the weapon is invalid.
	if (not item) then
		return
	end
	
	-- Return if there are no articles to unlock.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	local locked_articles = guide.locked or 0
	if (#locked_articles == 0) then
		return
	end
	
	-- Return the context option to detach a sight.
	return game.translate_string("ui_inv_download")
end

--------------------------------
----- Article Manipulation -----
--------------------------------

-- Jumps straight to a specific article.
function set_article(section)
	-- Instance of the guide object.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	
	-- Return if no section or guide exist.
	if not (section and guide) then
		return
	end
	
	-- Discover the category of the article.
	local article = nil
	local category = nil
	for index1 = 1, #guide.categories do
		category = guide.categories[index1]
		-- Determine if the article is in this category.
		if (category) then
			for index2 = 1, #category.articles do
				article = category.articles[index2]
				-- Set the category and article if correct.
				if (article and article == section) then
					guide:SelectCategory(index1)
					guide:SelectArticle(index1, index2)
					return
				end
			end
		end
	end
	
end

-- Unlocks an article for the player.
-- A random one will be chosen if none is specified.
function unlock_article(section)
	-- Instance of the guide object.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	
	-- Instance of the locked and unlocked article tables.
	local locked_articles = guide.locked or 0
	local unlocked_articles = xr_statistic.actor_statistic.guide_articles
	
	-- Return if all articles have been unlocked.
	if (#locked_articles == 0) then
		return
	end
	
	-- Select a random article if no section was provided.
	local index = nil
	if (not section) then
		index = math.random(#locked_articles)
		section = locked_articles[index]
		
	-- Otherwise determine the section index.
	else for k, v in pairs(locked_articles) do
			if (v == section) then
				index = k
				break
			end
		end
	end
	
	-- Update the required tables.
	unlocked_articles[section] = true
	table.remove(locked_articles, index)
	
	-- Notify the player and update the PDA selection.
	news_manager.send_tip(db.actor, "pda_btn_encyclopedia_notify", nil, "guide_unlock", nil, nil)
	set_article(section)
end
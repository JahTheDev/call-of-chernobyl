-- Faction Select for Call of Chernobyl
-- alundaio
--[[
Copyright (C) 2015 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]

------------------
-- on_game_load()
------------------
local spawn_path
local function on_game_load()
	local config = axr_main.config
	if not (config) then 
		return 
	end

	local se_actor = alife():actor()
	local need_save
	
	-- IRONMAN MODE
	if (USE_MARSHAL) then
		if (config:GetValue("temp","new_game_hardcore_mode",1) == true) then 
			-- shitty way to make a uuid but should be good enough to track the same saves
			math.randomseed(os.time())
			alife_storage_manager.get_state().uuid = GAME_VERSION .. "_" .. tostring(math.random(100)) .. tostring(math.random()) .. tostring(math.random(1000))
			config:SetValue("temp","new_game_hardcore_mode")
			need_save = true
		end
		if (config:GetValue("temp","new_game_survival_mode",1) == true) then
			alife_storage_manager.get_state().enable_survival_mode = true
			config:SetValue("temp","new_game_survival_mode")
			need_save = true
		end
		local con = get_console()
		if (config:GetValue("temp","new_game_hardcore_aim_mode",1) == true) then 
			config:SetValue("temp","new_game_hardcore_aim_mode")
			need_save = true
			con:execute("ai_aim_max_angle 20.0")
			con:execute("ai_aim_min_angle 17.0")
			con:execute("ai_aim_min_speed 2.00")
			con:execute("ai_aim_predict_time 0.28")
		else
			con:execute("ai_aim_max_angle 0.7854")
			con:execute("ai_aim_min_angle 0.19635")
			con:execute("ai_aim_min_speed 0.24")
			con:execute("ai_aim_predict_time 0.40")
		end
	end 
	
	-- NEW CHARACTER NAME
	local new_character_name = config:GetValue("temp","new_game_character_name",3) or ""
	if (new_character_name and new_character_name ~= "") then 
		config:SetValue("temp","new_game_character_name")
		need_save = true
		
		local data = stpk_utils.get_actor_data(se_actor)
		if (data) then
			data.character_name = new_character_name
			stpk_utils.set_actor_data(data,se_actor)
		end
	end
	
	-- NEW FACTION
	local faction = config:GetValue("temp","new_game_faction",3) or ""
	if (faction and faction ~= "") then
		local supply_id = config:GetValue("temp","new_game_supplies",2) or 1
		supply_id = supply_id > 0 and supply_id or 1
		
		config:SetValue("temp","new_game_supplies")
		config:SetValue("temp","new_game_faction")
		need_save = true
		
		spawn_path = patrol("spawn_player_"..faction)

		-- faction diversity
		if (faction ~= "monolith") then 
			task_manager.get_task_manager():give_task("turn_off_brain_scorcher")
		else 
			give_info("bar_deactivate_radar_done") -- disables brain scorcher
		end
		
		db.actor:set_character_community("actor_"..faction, 0, 0)
		
		-- set default goodwill for all factions vs. actor's new faction
		game_relations.set_community_goodwill_for_faction("actor_"..faction)
		
		local _xml = alun_utils.XmlParser:loadFile(getFS():update_path('$game_config$', '').."gameplay\\character_desc_general.xml")
		_xml = alun_utils.XmlFindNodeWithAttribute(_xml,"specific_character","id","actor_"..faction)
		if (_xml) then
			local supplies = alun_utils.XmlGetNodeValue(_xml,"supplies")
			if (supplies) then 
				supplies = alun_utils.str_explode(supplies,"\\n")
				local ini = system_ini()
				local sim = alife()
				for i=2,#supplies do
					local p = alun_utils.str_explode(supplies[i],",")
					local sec = alun_utils.str_explode(p[1],"=")
					if (ini:section_exist(sec[1])) then
						sec[2] = sec[2] and tonumber(sec[2]) or 1
						for ii=1,sec[2] do
							sim:create(sec[1],db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
						end
					end
				end
				
				supplies = alun_utils.XmlGetNodeValue(_xml,"loadout_"..supply_id)
				if (supplies) then 
					supplies = alun_utils.str_explode(supplies,"\\n")
					for i=1,#supplies do
						local p = alun_utils.str_explode(supplies[i],",")
						local sec = alun_utils.str_explode(p[1],"=")
						if (ini:section_exist(sec[1])) then
							sec[2] = sec[2] and tonumber(sec[2]) or 1
							for ii=1,sec[2] do
								sim:create(sec[1],db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
							end
						end
					end
				end
			end
			
			local data = stpk_utils.get_actor_data(se_actor)
			if (data) then
				local money_max = alun_utils.XmlGetNodeAttribute(_xml,"money","max")
				if (money_max) then
					money_max = tonumber(money_max)
					data.money = money_max
				end		
		
				data.specific_character = "actor_"..faction
				stpk_utils.set_actor_data(data,se_actor)
			end
		end
	end 
	
	if (need_save) then 
		config:Save()
	end
end

local function actor_on_first_update(binder,delta)
	if (spawn_path) then
		-- survival mode
		local faction = character_community(db.actor):sub(7)
		if (IsSurvivalMode() and system_ini():section_exist("survival_squad_"..faction)) then 
			local sim = alife()
			local squad = sim:create("survival_squad_"..faction,spawn_path:point(0),spawn_path:level_vertex_id(0),spawn_path:game_vertex_id(0))
			if (squad) then
				squad:create_npc(nil,nil,spawn_path:point(0),spawn_path:level_vertex_id(0),spawn_path:game_vertex_id(0))
				local se_obj,as
				for k in squad:squad_members() do
					se_obj = k.object or k.id and sim:object(k.id)
					if (se_obj) then
						SIMBOARD:setup_squad_and_group(se_obj)
						as = se_obj:get_alife_storage(true)
						if (as) then
							as.companion = true 
							as.companion_cannot_dismiss = true 
						end
					end
				end
			end
		end
		ChangeLevel(spawn_path:point(0),spawn_path:level_vertex_id(0),spawn_path:game_vertex_id(0),vector():set(0,0,0))
	end
	-- AO3 hotfix for missing addon tool
	if (system_ini():section_exist("addons_box") and not db.actor:object("addons_box")) then
		alife():create("addons_box",db.actor:position(),0,0,0)
	end
end 

local function actor_on_before_death()
	if not (USE_MARSHAL) then 
		return 
	end 
	
	local uuid = alife_storage_manager.get_state().uuid
	if not (uuid) then
		return -- not in hardcore mode
	end
	
	local fs = getFS()
	local flist = fs:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.scoc")
	local f_cnt = flist:Size()

	for	it=0, f_cnt-1 	do
		local file = flist:GetAt(it)
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - string.len(".scoc")))

		--printf("file_name = %s",file_name)
		local f = io.open(fs:update_path('$game_saves$', '')..file_name..".scoc","rb")
		if (f) then 
			local data = f:read("*all")
			f:close()
			if (data) then 
				local decoded = alife_storage_manager.decode(data)
				if (decoded and decoded.uuid == uuid) then 
					printf("match found uuid = %s",uuid)
					ui_load_dialog.delete_save_game(file_name)
				end
			end
		end
	end
end

------------------
-- on_game_start()
------------------
function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end 

--------------------------------------------------------------
-- faction_ui
--------------------------------------------------------------

class "faction_ui" (CUIScriptWnd)
function faction_ui:__init(owner) super()
	self.owner = owner
	
	self.selected_faction = nil
	self.f = {"stalker","bandit","csky","dolg","freedom","killer","army","ecolog","monolith"}
	self:InitControls(self.f)
	self:InitCallBacks(self.f)
end

function faction_ui:__finalize()
end

function faction_ui:InitControls(f)
	self:SetWndRect				(Frect():set(0,0,1024,768))
	self:Enable					(true)

	local xml					= CScriptXmlInit()
	xml:ParseFile				("ui_mm_faction_select.xml")

	xml:InitStatic				("background", self)
	self.dialog					= xml:InitStatic("main_dialog:dialog", self)
	
	-- Menu Quit
	local btn = xml:Init3tButton("main_dialog:btn_back", self.dialog)
	self:Register(btn,"btn_back")
	
	-- Menu Start Game
	btn = xml:Init3tButton("main_dialog:btn_submit", self.dialog)
	self:Register(btn,"btn_submit")
	
	-- randomizer
	btn = xml:Init3tButton("main_dialog:btn_rand", self.dialog)
	self:Register(btn,"btn_rand")
	
	-- character_name edit box
	xml:InitStatic("main_dialog:cap_character_name", self.dialog)
	self.character_name = xml:InitEditBox("main_dialog:input_character_name",self.dialog)
	self:Register(self.character_name,"input_character_name")
	-- Set Default Name
	self.character_name:SetText("Strelok")
	
	-- Faction select menu
	xml:InitStatic("main_dialog:cap_faction_name", self.dialog)
	self.disp_faction_name = xml:InitTextWnd("main_dialog:disp_faction_name", self.dialog)
	
	local pw
	for i=1,#f do
		self["btn_"..self.f[i]] = xml:Init3tButton("main_dialog:faction_"..f[i],self.dialog)
		self["btn_"..f[i].."_inactive"] = xml:Init3tButton("main_dialog:faction_"..f[i].."_inactive", self.dialog)
		self:Register(self["btn_"..f[i].."_inactive"],"btn_"..f[i].."_inactive_select")
	end
	
	-- Faction description window
	xml:InitStatic("main_dialog:description:background", self.dialog)
	xml:InitFrame("main_dialog:description:list_frame",self.dialog)
	self.scroll_v = xml:InitScrollView("main_dialog:description:scroll_v", self.dialog)
	
	self.desc_text = xml:InitTextWnd("main_dialog:description:desc_win", nil)
	self.scroll_v:AddWindow(self.desc_text, true)
	
	self:OnFactionSelect("stalker")
	
	if (USE_MARSHAL) then
		xml:InitStatic("main_dialog:cap_check_hardcore",self.dialog)
		self.ck_hardcore = xml:InitCheck("main_dialog:check_hardcore",	self.dialog)
		self:Register(self.ck_hardcore,"check_hardcore")
		
		xml:InitStatic("main_dialog:cap_check_hardcore_aim",self.dialog)
		self.ck_hardcore_aim = xml:InitCheck("main_dialog:check_hardcore_aim",	self.dialog)
		self:Register(self.ck_hardcore_aim,"check_hardcore_aim")
		
		xml:InitStatic("main_dialog:cap_check_survival",self.dialog)
		self.ck_survival = xml:InitCheck("main_dialog:check_survival",	self.dialog)
		self:Register(self.ck_survival,"check_survival")
		
		self.ck_states = { 	["ck_survival"] = false, 
							["ck_hardcore"] = false, 
							["ck_hardcore_aim"] = false 
		}
	end
end 

function faction_ui:InitCallBacks(f)
	self:AddCallback("btn_rand", ui_events.BUTTON_CLICKED, self.OnRandomize, self)
	self:AddCallback("btn_back", ui_events.BUTTON_CLICKED, self.OnQuit, self)
	self:AddCallback("btn_submit", ui_events.BUTTON_CLICKED, self.OnStartGame, self)
	self:AddCallback("list_factions", ui_events.LIST_ITEM_SELECT, self.OnSelectFactionList,		self)
	
	self:AddCallback("check_survival", ui_events.BUTTON_CLICKED, self.OnCheckSet, self)
	self:AddCallback("check_hardcore", ui_events.BUTTON_CLICKED, self.OnCheckSet, self)
	self:AddCallback("check_hardcore_aim", ui_events.BUTTON_CLICKED, self.OnCheckSet, self)
	
	for i=1,#f do 
		self:AddCallback("btn_"..f[i].."_inactive_select", ui_events.BUTTON_CLICKED, self["OnFaction_"..f[i]], self)
	end
end

function faction_ui:OnCheckSet()
	local ck = nil
	local value = nil
	for k,v in pairs(self.ck_states) do 
		if (self[k] and self[k]:GetCheck() ~= v) then
			self.ck_states[k] = self[k]:GetCheck()
			ck = k
			value = self[k]:GetCheck()
		end
	end

	if (ck == "ck_survival") then
		if (value == true and self.ck_hardcore) then
			self.ck_hardcore:SetCheck(true)
			self.ck_states["ck_hardcore"] = true
		end
	elseif (ck == "ck_hardcore") then
		if (value == false and self.ck_survival) then
			self.ck_survival:SetCheck(false)
			self.ck_states["ck_survival"] = false
		end
	end
	
	if (self[ck]:GetCheck()) then
		self.desc_text:SetText(game.translate_string("st_mm_"..ck.."_desc"))
	end
end

function faction_ui:OnRandomize()
	self.supplies_id = math.random(1,10)
	
	local faction = random_choice("stalker","bandit","csky","ecolog","army","monolith","dolg","freedom","killer")
	self:OnFactionSelect(faction)
	
	local new_name = ""
	
	if (faction == "army") then 
		new_name = random_choice("Pvt.","Sr. Pvt.","Jr. Sgt.","Sgt.","Sr. Sgt.","Mr. Sgt.","Jr. Lt.","Lt.","Sr. Lt.","Cpt.") .. " "
	end 
	local t = {"Sanek","Shurik","Vadya","Vasyan","Vasek","Vityukha","Vetal","Vovan","Zhorka","Grishka","Grishko","Dimon","Lekha","Dimukha","Zheka","Fimka","Ilyukha","Kostyan","Mitka","Mikhal","Mikha","Mikhas","Kolyan","Tolyan","Pavlukha","Sashok","Stepka"
					,"Stepukha","Timokha","Felka","Yuras","Yashka","Andryukha","Tokha","Arkasha","Temka","Boryan","Bodya","Andrey","Anton","Oleg","Roman","Aleksandr","Sergey","Anatoly","Yuri","Bohdan","Veniamin","Vitaly","Vladimir","Dmitry","Ivan"
					,"Konstantin","Alexey","Sanya","Sanek","Arthur","Yashka","Yarik","Yara","Slava","Borya","Borka","Bohdan","Slavik","Vadim","Vadya","Vadik","Valik","Valera","Shurik","Vasya","Vaska","Vasko","Venya","Vitya","Vitka","Vitalik","Vlad"
					,"Vova","Vovka","Lenya","Seva","Sevka","Gena","Genka","George","Gosha","Zhora","Mark","Gleb","Grisha","Alex","Grishka","Grishko","Danya","Kiryukha","Danko","Dennis","Dima","Dimka","Dmitro","Zhenya","Leshka","Zhenka","Egor","Egorka"
					,"Fima","Vanya","Vanka","Igorek","Ilya","Kostya","Kostik","Tolik","Leva","Lenya","Lyonka","Max","Matvei","Mitya","Misha","Mishka","Nikita","Nik","Antonio","Kolya","Evgeniy","Pasha","Pashka","Petya","Petka","Semyon","Semen","Serega"
					,"Rusik","Stepan","Stepa","Tima","Timka","Artem","Fedor","Fedya","Fedka","Filya","Filka","Edik","Yurka","Yurik","Yurko","Yasha"}
	new_name = new_name .. t[math.random(1,#t)] .. " "
	local r = random_choice(1,2,3,4,5)
	if (r == 1) then
		local t = {"Gray","Berserk","Rotten","Patty","Spy","Bison","Beaver","Bulldog","Ox","Sparrow","Woodpecker","Beast","Warlock","Humpback","Boar","Crucian","Canary","Bedbug","Nark","Moose","Rat","Boa","Loaf","Broken","Long John","Mayhem","Bolt","Razor","Drum","Junk","Screw","Dynamite","Trump","Shovel","Joint","Dead Duck","Cross","Tar","Sock","Crowbar","Panadol","Shiv","Piston","Nickel","Tails","Lethal","Percher","Grindstone","Ace","Chisel","Jackstraw","Shortstop","Crosstie","Stud","Jiggers","Fist","Bruise","Tadpole","Hacker","Khan","Koschei","Rambo","Tour Guide","Terminator","Chapai","Genghis","Banana","Loaf","Butterfingers","Papa","Spike","Homeboy","Gangrene","Glitch","Degree","Antelope","Fubar","Pariah","Aspic","Charcoal","Trump","Joint","Sock","Goblin","Moor","Reefer","Flop","Ravioli","Chili","Grater","Fatso","Biscuit","Ghoul","Miser","Broken","Tightwad","Squint","Fiend","Cripple","Kicker","Skew","Crooked","Shifter","Toupee","Fierce","Crony","Local","Slime","Champ","Monocle","Rascal","Deadbeat","Hotshot","Turd","Defunct","Psycho","Loudmouth","Torn","Grabber","Blind","Snot","Hipster","Met","Corpse","Slasher","Ears","Jester","Greyhound","Lame","Sturdy","Cranky","Connoisseur","Robust","Squire","Leech","Artist","Conman","Banker","Hobo","Baron","Peddler","Unorthodox","Tramp","Bosun","Pigmy","Bourbon","Bourgeois","Chauffeur","Thief","Shaven","Gangster","Messenger","Count","Tyrant","Savage","Strangler","Counselor","Player","Cheat","Godfather","Veteran","Coach","Bling-bling","Maniac","Undertaker","Butcher","Ninja","Executioner","Punk","Guerilla","Pacifist","Boulder","Pirate","Arsonist","Prince","Brigand","Kamikaze","Pimp","Tyrant","Hitman","Trombone","Chemist","Abdurakhmanov","Altynnik","Barsak","Kireev","Scherbin","Kovalchuk","Koev","Kozlov","Kolontarev","Kolontar","Kondratenko","Korkin","Korneev","Baul","Kravchenko","Krivda","Krivokhatsky","Kuznetsov","Kuzmich","Kuzyakin","Kulchitsky","Kuntsev","Kurvitz","Kucheruk","Bashakov","Kushnarev","Khaladze","Lavrik","Lavrov","Livshits","Lisichansky","Litvin","Lymarenko","Mazepa","Makarenko","Bashmakov","Maltsev","Mamaev","Merzlayev","Milchenko","Mironyuk","Mohrer","Kryga","Mostovoi","Muntyan","Mukhamedov","Beshevly","Myskov","Navrotsky","Nepritsky","Nikanorov","Nikeshin","Nikulin","Futzin","Nordiev","Nosan","Opolev","Binoev","Orlevich","Orlov","Petkevich","Petrenko"}
		new_name = new_name .. t[math.random(1,#t)]
	elseif (r == 2) then 
		local t = {"Vorontsov","Vorokhaev","Vyushinsky","Anisiev","Galkin","Ganzyuk","Garkovenko","Garkusha","Georgov","Glebovsky","Gnatyuk","Goncharenko","Gordienko","Gorlevoy","Ardashev","Gorokhin","Goryunov","Grebenko","Gritzaenko","Gritzay","Gritzenkov","Grishachev","Grischuk","Gubar","Gunko","Babich","Gurevich","Denisenko","Dovgalyuk","Dombrik","Dotsenko","Drozdush","Dubenchuk","Dudorov","Duka","Dumko","Balan","Dunaev","Dyklov","Erofeev","Efremov","Zhabenko","Zhmyev","Zhurakovsky","Zabyagoda","Zagorodnyuk","Zamosenchuk","Baranov","Zarubin","Zakharin","Zvonnitsky","Zinoviev","Zozo","Zolotar","Zubarev","Zubkov","Ivanov","Ignatenko","Baranovsky","Izhenko","Ischuk","Kazakov","Kazantsev","Kandybabko","Kapuka","Kapustyanko","Katz","Kikabidze","Gatzula","Abdurakhmanov","Altynnik","Barsak","Kireev","Scherbin","Kovalchuk","Koev","Kozlov","Kolontarev","Kolontar","Kondratenko","Korkin","Korneev","Baul","Kravchenko","Krivda","Krivokhatsky","Kuznetsov","Kuzmich","Kuzyakin","Kulchistky","Kuntsev","Kurvitz","Kucheruk","Bashakov","Kushnarev","Khaladze","Lavrik","Lavrov","Livshits","Lisichansky","Litvin","Lymarenko","Mazepa","Makarenko","Bashmakov","Maltsev","Mamaev","Merzlayev","Milchenko","Mironyuk","Mohrer","Kryga","Mostovoi","Muntyan","Mukhamedov","Beshevly","Myskov","Navrotsky","Nepritsky","Nikanorov","Nikeshin","Nikulin","Futzin","Nordiev","Nosan","Opolev","Binoev","Orlevich","Orlov","Petkevich","Petrenko","Petrov","Plokhenko","Podyachev","Polyanin","Poplavsky","Popov","Blinov","Portnykh","Prasolov","Prokopenko","Proskurin","Protsenko","Prudov","Pustovar","Puchek","Rabinovich","Radkevich","Bobrov","Rezun","Rogoza","Rodnyansky","Rotan","Rublev","Rudik","Rusanov","Rychagirsky","Savchenko","Savchuk","Bogdanov","Sagitov","Sviridov","Sedykh","Sereda","Sidorenko","Sidorov","Siniy","Sinitzyn","Skameika","Slutsky","Boiko","Smelov","Smoly","Sorokin","Statzura","Stepchin","Stychinsky","Sykula","Tarnavsky","Tatarchuk","Timchuk","Andreychuk","Boichenko","Boldeskul","Bondarev","Borisov","Brich","Bronshtein","Buryak","Buturin","Byalo","Valentinov","Andruschenko","Vasiliev","Veselov","Vinogradov","Vovnenko","Volanchuk","Volodar","Voloshin","Vorontsov","Vorokhaev","Vyushinsky","Anisiev","Galkin","Ganzyuk","Garkovenko","Garkusha","Georgov","Glebovsky","Gnatyuk","Goncharenko","Gordienko","Gorlevoy","Ardashev","Gorokhin"}
		new_name = new_name .. t[math.random(1,#t)]
	elseif (r == 3) then 
		local t = {"Zarubin","Zakharin","Zvonnitsky","Zinoviev","Zozo","Zolotar","Zubarev","Zubkov","Ivanov","Ignatenko","Baranovsky","Izhenko","Ischuk","Kazakov","Kazantsev","Kandybabko","Kapuka","Kapustyanko","Katz","Kikabidze","Gatzula","Abdurakhmanov","Altynnik","Barsak","Kireev","Scherbin","Kovalchuk","Koev","Kozlov","Kolontarev","Kolontar","Kondratenko","Korkin","Korneev","Baul","Kravchenko","Krivda","Krivokhatsky","Kuznetsov","Kuzmich","Kuzyakin","Kulchistky","Kuntsev","Kurvitz","Kucheruk","Bashakov","Kushnarev","Khaladze","Lavrik","Lavrov","Livshits","Lisichansky","Litvin","Lymarenko","Mazepa","Makarenko","Bashmakov","Maltsev","Mamaev","Merzlayev","Milchenko","Mironyuk","Mohrer","Kryga","Mostovoi","Muntyan","Mukhamedov","Beshevly","Myskov","Navrotsky","Nepritsky","Nikanorov","Nikeshin","Nikulin","Futzin","Nordiev","Nosan","Opolev","Binoev","Orlevich","Orlov","Petkevich","Petrenko","Petrov","Plokhenko","Podyachev","Polyanin","Poplavsky","Popov","Blinov","Portnykh","Prasolov","Prokopenko","Proskurin","Protsenko","Prudov","Pustovar","Puchek","Rabinovich","Radkevich","Bobrov","Rezun","Rogoza","Rodnyansky","Rotan","Rublev","Rudik","Rusanov","Rychagirsky","Savchenko","Savchuk","Bogdanov","Sagitov","Sviridov","Sedykh","Sereda","Sidorenko","Sidorov","Siniy","Sinitzyn","Skameika","Slutsky","Boiko","Smelov","Smoly","Sorokin","Statzura","Stepchin","Stychinsky","Sykula","Tarnavsky","Tatarchuk","Timchuk","Andreychuk","Boichenko","Boldeskul","Bondarev","Borisov","Brich","Bronshtein","Buryak","Buturin","Byalo","Valentinov","Andruschenko","Vasiliev","Veselov","Vinogradov","Vovnenko","Volanchuk","Volodar","Voloshin","Vorontsov","Vorokhaev","Vyushinsky","Anisiev","Galkin","Ganzyuk","Garkovenko","Garkusha","Georgov","Glebovsky","Gnatyuk","Goncharenko","Gordienko","Gorlevoy","Ardashev","Gorokhin","Goryunov","Grebenko","Gritzaenko","Gritzay","Gritzenkov","Grishachev","Grischuk","Gubar","Gunko","Babich","Gurevich","Denisenko","Dovgalyuk","Dombrik","Dotsenko","Drozdush","Dubenchuk","Dudorov","Duka","Dumko","Balan","Dunaev","Dyklov","Erofeev","Efremov","Zhabenko","Zhmyev","Zhurakovsky","Zabyagoda","Zagorodnyuk","Zamosenchuk","Baranov","Zarubin","Zakharin","Zvonnitsky","Zinoviev","Zozo","Zolotar","Zubarev","Zubkov","Ivanov","Ignatenko","Baranovsky","Izhenko","Ischuk","Kazakov","Kazantsev","Kandybabko","Kapuka"}
		new_name = new_name .. t[math.random(1,#t)]
	elseif (r == 4) then
		local t = {"Petrov","Plokhenko","Podyachev","Polyanin","Poplavsky","Popov","Blinov","Portnykh","Prasolov","Prokopenko","Proskurin","Protsenko","Prudov","Pustovar","Puchek","Rabinovich","Radkevich","Bobrov","Rezun","Rogoza","Rodnyansky","Rotan","Rublev","Rudik","Rusanov","Rychagirsky","Savchenko","Savchuk","Bogdanov","Sagitov","Sviridov","Sedykh","Sereda","Sidorenko","Sidorov","Siniy","Sinitzyn","Skameika","Slutsky","Boiko","Smelov","Smoly","Sorokin","Statzura","Stepchin","Stychinsky","Sykula","Tarnavsky","Tatarchuk","Timchuk","Andreychuk","Boichenko","Boldeskul","Bondarev","Borisov","Brich","Bronshtein","Buryak","Buturin","Byalo","Valentinov","Andruschenko","Vasiliev","Veselov","Vinogradov","Vovnenko","Volanchuk","Volodar","Voloshin","Goryunov","Grebenko","Gritzaenko","Gritzay","Gritzenkov","Grishachev","Grischuk","Gubar","Gunko","Babich","Gurevich","Denisenko","Dovgalyuk","Dombrik","Dotsenko","Drozdush","Dubenchuk","Dudorov","Duka","Dumko","Balan","Dunaev","Dyklov","Erofeev","Efremov","Zhabenko","Zhmyev","Zhurakovsky","Zabyagoda","Zagorodnyuk","Zamosenchuk","Baranov"}
		new_name = new_name .. t[math.random(1,#t)]
	elseif (r == 5) then 
		local t = {"Kapustyanko","Katz","Kikabidze","Gatzula","Sinaev","Feigelman","Ledentsov","Alferov","Antipin","Blinov","Bogomolov","Vasilevich","Geshkenbein","Dyakonov","Erokhin","Zaikin","Zakharov","Ivchenko","Kabanov","Larin","Manko","Mironov","Stepanenko","Oganesyan","Chernodub","Shilov","Chirikov","Belyavin","Fadeev","Steklov","Andreev","Spirin","Balitsky","Abdurakhmanov","Altynnik","Barsak","Kireev","Scherbin","Kovalchuk","Koev","Kozlov","Kolontarev","Kolontar","Kondratenko","Korkin","Korneev","Baul","Kravchenko","Krivda","Krivokhatsky","Kuznetsov","Kuzmich","Kuzyakin","Kulchistky","Kuntsev","Kurvitz","Kucheruk","Bashakov","Kushnarev","Khaladze","Lavrik","Lavrov","Livshits","Lisichansky","Litvin","Lymarenko","Mazepa","Makarenko","Bashmakov","Maltsev"}
		new_name = new_name .. t[math.random(1,#t)]
	end 
	self.character_name:SetText(new_name)
end

function faction_ui:OnFactionSelect(faction)
	local gs = game.translate_string
	local desc = gs("st_faction_"..faction.."_desc") .. "\\n \\n"
	
	desc = desc .. "%c[0,245,245,220]Relations:\\n"
	
	local t = {"stalker","bandit","csky","ecolog","army","monolith","dolg","freedom","killer"}
	for i=1,#t do 
		if not (t[i] == faction) then 
			local v = relation_registry.community_relation("actor_"..faction, t[i])
			if (v >= 1000) then 
				desc = desc .. "   %c[0,51,255,51]".. gs("st_faction_"..t[i]) .. "\\n"
			elseif (v <= -1000) then 
				desc = desc .. "   %c[0,255,0,0]" .. gs("st_faction_"..t[i]) .. "\\n"
			else 
				desc = desc .. "   %c[0,255,255,51]" .. gs("st_faction_"..t[i]) .. "\\n"
			end
		end
	end
	
	self.supplies_id = self.supplies_id or 1
	
	desc = desc .. "\\n \\n"
	
	local _xml = alun_utils.XmlParser:loadFile(getFS():update_path('$game_config$', '').."gameplay\\character_desc_general.xml")
	_xml = alun_utils.XmlFindNodeWithAttribute(_xml,"specific_character","id","actor_"..faction)
	if (_xml) then
	
		local money_max = alun_utils.XmlGetNodeAttribute(_xml,"money","max")
		if (money_max) then
			desc = desc .. "%c[0,245,245,220]Money: %c[0,188,210,238]".. money_max .. " RU\\n \\n"
		end
		
		local supplies = alun_utils.XmlGetNodeValue(_xml,"supplies")
		if (supplies) then 
			desc = desc .. "%c[0,245,245,220]Equipment:\\n"

			supplies = alun_utils.str_explode(supplies,"\\n")
			local ini = system_ini()
			for i=2,#supplies do
				local sec = alun_utils.str_explode(supplies[i],"=")
				if (ini:section_exist(sec[1])) then
					local itm_name = gs(ini:r_string(sec[1],"inv_name") or "")
					sec[2] = sec[2] and tonumber(sec[2]) or 1
					if (sec[2] > 1) then 
						desc = desc .. "   %c[0,188,210,238]".. itm_name .. " %c[0,245,245,220]x"..tostring(sec[2]).."\\n"
					else
						desc = desc .. "   %c[0,188,210,238]".. itm_name .."\\n"
					end
				end
			end
			
			supplies = alun_utils.XmlGetNodeValue(_xml,"loadout_"..tostring(self.supplies_id or 1))
			if (supplies) then
				supplies = alun_utils.str_explode(supplies,"\\n")
				for i=1,#supplies do
					local sec = alun_utils.str_explode(supplies[i],"=")
					if (ini:section_exist(sec[1])) then
						local itm_name = gs(ini:r_string(sec[1],"inv_name") or "")
						sec[2] = sec[2] and tonumber(sec[2]) or 1
						if (sec[2] > 1) then 
							desc = desc .. "   %c[0,188,210,238]".. itm_name .. " %c[0,245,245,220]x"..tostring(sec[2]).."\\n"
						else
							desc = desc .. "   %c[0,188,210,238]".. itm_name .."\\n"
						end
					end
				end
			end			
		end
	end
	
	self.selected_faction = faction
	
	for i=1,#self.f do
		self["btn_"..self.f[i]]:Show(false)
		self["btn_"..self.f[i].."_inactive"]:Show(true)
	end
	
	self["btn_"..faction]:Show(true)
	self["btn_"..faction.."_inactive"]:Show(false)
	
	self.disp_faction_name:SetText(gs("st_faction_"..faction))
	self.desc_text:SetText(desc)
end

function faction_ui:OnFaction_stalker()
	self:OnFactionSelect("stalker")
end
function faction_ui:OnFaction_bandit()
	self:OnFactionSelect("bandit")
end
function faction_ui:OnFaction_csky()
	self:OnFactionSelect("csky")
end
function faction_ui:OnFaction_dolg()
	self:OnFactionSelect("dolg")
end
function faction_ui:OnFaction_freedom()
	self:OnFactionSelect("freedom")
end
function faction_ui:OnFaction_killer()
	self:OnFactionSelect("killer")
end
function faction_ui:OnFaction_army()
	self:OnFactionSelect("army")
end
function faction_ui:OnFaction_ecolog()
	self:OnFactionSelect("ecolog")
end
function faction_ui:OnFaction_monolith()
	self:OnFactionSelect("monolith")
end


function faction_ui:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if res==false then
		local bind = dik_to_bind(dik)
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				self:OnQuit()
			elseif (dik == DIK_keys.DIK_S) then 
			end
		end
	end
	return res
end

function faction_ui:OnQuit()
	self.owner:ShowDialog(true)
	self.owner:Show(true)
	self:HideDialog()
	self:Show(false)
end

function faction_ui:OnStartGame()
	-- start game anyway if no config or axr_main script
	if not (axr_main and axr_main.config) then 
		self.owner:StartGame()
		return
	end 
	
	local character_name = self.character_name:GetText()
	if (character_name == "") then
		-- don't start game with no name. TODO: Add msgbox warning
		return
	end
	
	if (self.ck_hardcore and self.ck_hardcore:GetCheck()) then 
		axr_main.config:SetValue("temp","new_game_hardcore_mode",true)
	end 
	
	if (self.ck_hardcore_aim and self.ck_hardcore_aim:GetCheck()) then 
		axr_main.config:SetValue("temp","new_game_hardcore_aim_mode",true)
	end
	
	if (self.ck_survival and self.ck_survival:GetCheck()) then 
		axr_main.config:SetValue("temp","new_game_survival_mode",true)
	end 
	
	if (self.selected_faction) then 
		axr_main.config:SetValue("temp","new_game_faction",self.selected_faction)
	end
	
	axr_main.config:SetValue("temp","new_game_supplies",tostring(self.supplies_id or 1))
	
	-- Store info in temp config so it can be read on next game load
	axr_main.config:SetValue("temp","new_game_character_name",character_name)
	axr_main.config:Save()
	
	-- Start the game
	self.owner:StartGame()
end


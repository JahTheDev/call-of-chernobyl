--[[
************************************************************
					xr_eat_medkit
by Alundaio original by Rulix
************************************************************
--]]
local eating = {}

function on_game_start()
	local ini = ini_file("ai_tweaks\\xr_eat_medkit.ltx")
	local enabled = ini:r_bool_ex("plugin","enable",false)
	if not (enabled) then ini = nil return end
	RegisterScriptCallback("npc_on_update",npc_update)
	local sect = "plugin"
	--eating.exc_comms = alun_utils.parse_list(ini,sect,"excluded_communities",true)
	eating.ic = ini:r_bool_ex(sect,"in_combat",false)
	eating.oc = ini:r_bool_ex(sect,"out_combat",false)
	eating.max_h = (ini:r_float_ex(sect,"medkit_health") or 50)/100
	eating.min_b = ini:r_float_ex(sect,"bandage_bleeding") or 0.2
	eating.medkits = alun_utils.parse_list(ini,sect,"medkits")
	eating.bandages = alun_utils.parse_list(ini,sect,"bandages")
	eating.medkits_delay = {}
	eating.bandages_delay = {}
	local ranks = alun_utils.get_rank_list()
	for i=1,#ranks do 
		local rn = ranks[i]
		eating.medkits_delay[rn] = alun_utils.parse_list(ini,rn,"medkit_delay")
		eating.bandages_delay[rn] = alun_utils.parse_list(ini,rn,"bandage_delay")
	end
	ini = nil
end

function npc_update(npc,st)
	if not (enabled) and not (npc:alive()) then 
		return 
	end
	local st_eat_medkit = st.eat_medkit
	if not (st_eat_medkit) then
		st_eat_medkit = eat_medkit(npc,st)
		st.eat_medkit = st_eat_medkit
	else
		local comm = npc:character_community()
		if (comm == "trader" or comm == "zombied") then
			return
		end
		st_eat_medkit:update(npc)
	end
end

class "eat_medkit"
function eat_medkit:__init(object,storage)
	self.st = storage
	self.rank = ranks.get_obj_rank_name(object)
end

function eat_medkit:update(npc)
	local stage = self.stage or 0
	local tg = time_global()
	if (stage == 0) then
		if (IsWounded(npc)) then 
			self.item = nil
			self.timer = nil
			return
		end 
		local enemy = npc:best_enemy()
		local eating_ic = eating.ic
		local eating_oc = eating.oc
		if (eating_oc and not eating_ic and enemy) or (eating_ic and not eating_oc and not enemy) then
			self.item = nil
			self.timer = nil
			return
		end
		local rank = self.rank
		local function check(item)
			local eating_item = eating[item]
			for i=1,#eating_item do
				local eating_item_i = eating_item[i]
				if (npc:object(eating_item_i)) then
					local eating_item_delay_rank = eating[item..'_delay'][rank]
					self.timer = tg + math.random(eating_item_delay_rank[1] or 10000, eating_item_delay_rank[2] or 15000)
					self.item = eating_item_i
					self.stage = 1
					return
				end
			end
		end
		if (npc.health < eating.max_h and not IsWounded(npc)) then
			check('medkits')
		end
		if (npc.bleeding > eating.min_b) then
			check('bandages')
		end
	elseif (stage == 1) then
		local timer = self.timer
		if (timer and tg > timer) then
			local item = self.item
			if (item) then
				local med = npc:object(item)
				if med then
					consume_medkit(npc,med)
					--printf("%s[%s]: Used medical supplies",npc:name(),npc:character_name())
				end
				self.item = nil
			end
			self.stage = 0
		end
	end
end

function consume_medkit(npc,medkit)
	local ms = medkit:section()
	npc:eat(medkit)
	local ini = system_ini()
	local time = ini:r_float_ex(ms,"boost_time") or 1
	local health_restore = ini:r_float_ex(ms,"boost_health_restore") or 0
	local bleeding_restore = ini:r_float_ex(ms,"boost_bleeding_restore") or 0
	if (health_restore) then
		npc.health = health_restore * time * 10
	end
	if (bleeding_restore) then
		npc.bleeding = bleeding_restore * time * 10
	end
end

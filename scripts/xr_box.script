local item_by_community = {}
local mul_by_level = {}
local count_by_level = {}
local ammo_sections = {}

local death_ini = ini_file("misc\\ph_box_generic.ltx")

class "ph_item_box"
function ph_item_box:__init(obj)
	self.obj = obj
	local community_list = { "def_box", "small_box_generic", "small_box_ussr", "small_box_nato", "small_box_army", "small_box_science", "big_box_generic", "big_box_dungeons", "big_box_arsenal"}

	for k,v in pairs(community_list) do
		item_by_community[v] = {}
		if death_ini:section_exist(v) then
			local n = death_ini:line_count(v)
			local id, value = "", ""
			for i=0,n-1 do
				result, id, value = death_ini:r_line(v,i,"","")
				item_by_community[v][id] = 100*tonumber(value)
			end
		end
	end

	local level_name = level.name()

	if not death_ini:section_exist(level_name) then
		level_name = "default"
	end

	local n = death_ini:line_count(level_name)
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value = death_ini:r_line(level_name,i,"","")
		mul_by_level[id] = tonumber(value)
	end

	local item_count_section = "item_count_" .. level.get_game_difficulty()
	local n = death_ini:line_count(item_count_section)
	for i=0,n-1 do
		result, id, value	= death_ini:r_line(item_count_section,i,"","")

		local t = parse_nums(value)
		local min = t[1] or 1
		local max = t[2] or min

		min = tonumber(min) * (mul_by_level[id] or 0)
		max = tonumber(max) * (mul_by_level[id] or 0)

		count_by_level[id] = {min = min, max = max}
	end

	ammo_sections = {}
	local n = death_ini:line_count("ammo_sections")
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value	= death_ini:r_line("ammo_sections",i,"","")
		ammo_sections[id] = true
	end
end

function ph_item_box:spawn_items()
	local spawn_items = {}
	local ini = self.obj:spawn_ini()
	local community	= utils.cfg_get_string(ini, "drop_box", "community", self.obj, false, "", "def_box")
	local items = r_items(ini, "drop_box", "items", self.obj)
	if items then
		for k,v in pairs(items) do
			if (v.count > 0) then
				create_obligatory_items(self.obj, v.section, v.count)
			end
		end
		return
	end

	local spawn_items = item_by_community[community]
	if spawn_items == nil then
		printf("xr_box: wrong community [%s] for box [%s]", community, self.obj:name())
		spawn_items = {}
		spawn_items = item_by_community["def_box"]
	end

	local found = false
	for k,v in pairs(spawn_items) do
		if (v > 0) then
			local number = math.ceil(math.random(count_by_level[k].min, count_by_level[k].max))
			if (has_alife_info("scavenger_skill_tier_5")) then
				number = number + math.random(0,1)
			end
			if (number > 0) then
				create_items(self.obj, k, number, v, found)
			end
		end
	end
	if (found) then
		xr_statistic.inc_founded_secrets_counter()
		news_manager.send_treasure(1)
	end
end

function create_items(obj, section, number, rnd, found)
	if not (system_ini():section_exist(section)) then 
		return 
	end
	if ammo_sections[section] == true then
		if math.random(100) <= rnd	then
			if number > 0 then
				local position = vector():set(0,0,0)
				position.x = obj:position().x --+ math.random(-30,30)/100
				position.z = obj:position().z --+ math.random(-30,30)/100
				position.y = obj:position().y + 0.5 --+ math.random(30,50)/100
				
				create_ammo(section,position,obj:level_vertex_id(),obj:game_vertex_id(),65535,number)
			end
			found = true
		end
	else
		for i=1,number do
			if math.random(100) <=  rnd then
				local position = vector():set(0,0,0)
				position.x = obj:position().x --+ math.random(-30,30)/100
				position.z = obj:position().z --+ math.random(-30,30)/100
				position.y = obj:position().y + 0.2 --+ math.random(30,50)/100

				alife():create(section,position,obj:level_vertex_id(),obj:game_vertex_id())
				found = true
			end
		end
	end
end

function parse_names( s )
	local t = {}
	for name in string.gfind( s, "([%w_%-.\\]+)%p*" ) do
		table.insert( t, name )
	end
	return t
end

function r_items( spawn_ini, section, line, obj)
	if spawn_ini:line_exist( section, line ) then
		local t = parse_names( spawn_ini:r_string( section, line ) )
		local n = #t
		local ret_table = {}
		local k = 1
		while k <= n do
			local item = {}
			item.section = t[k]
			if item_by_community["def_box"][item.section] then
				if t[k+1] ~= nil then
					local p = tonumber(t[k+1])
					if p then
						item.count = p
						k = k + 2
					else
						item.count = 1
						k = k + 1
					end
				else
					item.count	 = 1
					k = k + 1
				end
				table.insert(ret_table, item)
			else 
				printf("xr_box: no such item exists for def_box %s",k)
			end
		end
		return ret_table
	end
	return nil
end

function create_obligatory_items(obj, item , count)
	if not (system_ini():section_exist(item)) then 
		return 
	end
	for i = 1,count do
		local position = vector():set(0,0,0)
		position.x = obj:position().x --+ math.random(-30,30)/100
		position.z = obj:position().z --+ math.random(-30,30)/100
		position.y = obj:position().y + 0.3 --+ math.random(30,50)/100 + 2
		alife():create(item,position,obj:level_vertex_id(),obj:game_vertex_id())
	end
end
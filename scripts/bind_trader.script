-----------------------------------------------------------------------------------
-- Sidor etc binding
-----------------------------------------------------------------------------------

function bind(obj)
	local new_binder = trader_object_binder(obj)
	obj:bind_object(new_binder)
end

------------------------------------------------------------------------------------
class "trader_object_binder" (object_binder)

function trader_object_binder:__init(obj) super(obj)
	self.loaded = false
	if (USE_MARSHAL) then
		RegisterScriptCallback("save_state",self.save_state,self)
	end
end


function trader_object_binder:reload(section)
	object_binder.reload(self, section)
end

function trader_object_binder:reinit()
	object_binder.reinit(self)

	db.storage[self.object:id()] = { }

	self.st = db.storage[self.object:id()]
end

function trader_object_binder:update(delta)
	object_binder.update(self, delta)

	-- Апдейт торговли
	if self.object:clsid() == clsid.script_trader then
		trade_manager.update(self.object)
	end

	local st = db.storage[self.object:id()]
	if st ~= nil and st.active_scheme ~= nil then
		xr_logic.try_switch_to_another_section(self.object, st[st.active_scheme], db.actor)
	end
	
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
end

function trader_object_binder:net_spawn(sobject)
	if not object_binder.net_spawn(self, sobject) then
		return false
	end

	local on_offline_condlist = db.storage[self.object:id()] and db.storage[self.object:id()].overrides and db.storage[self.object:id()].overrides.on_offline_condlist
	if on_offline_condlist ~= nil then
		xr_logic.pick_section_from_condlist(db.actor, self.object, on_offline_condlist)
	end

	if not self.object:alive() then
		return true
	end
	
	if alife():object(self.object:id()) == nil then
		return false
	end

	db.add_obj(self.object)
	if self.object:clsid() == clsid.script_trader then
	      --self.object:set_trader_global_anim("idle_spinka")
		smart_terrain.setup_gulag_and_logic_on_spawn( self.object, self.st, sobject, modules.stype_trader, self.loaded)
	end
	
	return true
end

function trader_object_binder:net_destroy()
	xr_sound.stop_sounds_by_id(self.object:id())

	local st = db.storage[self.object:id()]
	if st and st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end

	if db.offline_objects[self.object:id()] then
		db.offline_objects[self.object:id()].level_vertex_id = self.object:level_vertex_id()
		db.offline_objects[self.object:id()].active_section = db.storage[self.object:id()].active_section
	end

	db.del_obj(self.object)
	db.storage[self.object:id()] = nil
	object_binder.net_destroy(self)
end

function trader_object_binder:net_save_relevant()
	return true
end

function trader_object_binder:save(packet)
	set_save_marker(packet, "save", false, "trader_object_binder")
	object_binder.save(self, packet)
	set_save_marker(packet, "save", true, "trader_object_binder")
	
	if (USE_MARSHAL) then 
		return 
	end 
	
	xr_logic.save_obj(self.object, packet)
end

function trader_object_binder:load(reader)
	self.loaded = true
	set_save_marker(reader, "load", false, "trader_object_binder")
	object_binder.load(self, reader)

	set_save_marker(reader, "load", true, "trader_object_binder")
	
	if (USE_MARSHAL) then
		if (self.object) then
			load_state(self.object:id(),alife_storage_manager.get_state()) -- fake because binder not ready when real load_state made
		end
		return 
	end
	
	xr_logic.load_obj(self.object, reader)
end

----------------------------------------------------------------------------------
function trader_object_binder:save_state(m_data)
	--alun_utils.debug_write(strformat("trader_object_binder:save_state %s BEFORE",id))
	local id = self.object and self.object:id()
	local st = id and db.storage[id]
	if not (st) then 
		return
	end
	if not (m_data.xr_logic) then 
		m_data.xr_logic = {}
	end
	m_data.xr_logic[id] = {}
	--m_data.xr_logic[id].job_ini = st.job_ini
	m_data.xr_logic[id].ini_filename = st.ini_filename
	m_data.xr_logic[id].section_logic = st.section_logic
	m_data.xr_logic[id].active_section = st.active_section
	m_data.xr_logic[id].gulag_name = st.gulag_name
	m_data.xr_logic[id].activation_time = (st.activation_time or 0) - time_global()
	m_data.xr_logic[id].activation_game_time = st.activation_game_time

	--xr_sound.npc_save_state(id,m_data)
	trade_manager.save_state(id,m_data)
	
	db.storage[id].pstor = db.storage[id].pstor or {}
	--alun_utils.debug_write(strformat("trader_object_binder:save_state %s AFTER",id))
end 

function load_state(id,m_data)
	if not (id and m_data.xr_logic and m_data.xr_logic[id]) then 
		return 
	end
	db.storage[id] = db.storage[id] or {}
	local st = db.storage[id]
	--alun_utils.debug_write(strformat("trader_object_binder:load_state %s BEFORE",id))
	--st.job_ini = m_data.xr_logic[id].job_ini
	st.loaded_ini_filename = m_data.xr_logic[id].ini_filename
	st.loaded_section_logic = m_data.xr_logic[id].section_logic
	st.loaded_active_section = m_data.xr_logic[id].active_section or "nil"
	st.loaded_gulag_name = m_data.xr_logic[id].gulag_name or ""
	st.activation_time = m_data.xr_logic[id].activation_time and m_data.xr_logic[id].activation_time + time_global() or time_global()
	st.activation_game_time = m_data.xr_logic[id].activation_game_time or game.get_game_time()
	
	--xr_sound.npc_load_state(id,m_data)
	trade_manager.load_state(id,m_data)
	
	if (m_data.pstor_all and m_data.pstor_all[id]) then 
		db.storage[id].pstor = m_data.pstor_all[id]
		m_data.pstor_all[id] = nil
	end 

	if (m_data.pstor_ctime and m_data.pstor_ctime[id]) then
		db.storage[id].pstor_ctime = m_data.pstor_ctime[id]
		m_data.pstor_ctime[id] = nil
	end
	--alun_utils.debug_write(strformat("trader_object_binder:load_state %s AFTER",id))
end 
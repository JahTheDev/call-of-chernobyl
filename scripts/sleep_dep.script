--// -----------------		sleep deprivation for Coc		---------------------
--// author	: 	Nuor
--// version:	1.22 (alt)
--// created:	4-09-2016
--// last edit:	4-09-2016
--//------------------------------------------------------------------------------
local force 		= 48		--// time between sleeps that triggers passing out
local start_blur 	= 16		--// time between sleeps when vision blur starts 
local itn_mul 		= 0.2		--// blur intensity multiplier
local die_chance 	= 0.1		--// chance of dying if actor passes out
local last_chk 		= 0			--// hourly update counter
last_sleep, no_sleep = 0, 1		--// change "no_sleep" to 0 to allow sleep spam

local items = {
	energy_drink	= -4,
	antirad			= 2,
	medkit			= 2,
	medkit_army		= 3,
	medkit_scientic = 4,
	vodka			= 3,
}

function on_game_start()
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("actor_on_item_use",actor_on_item_use)
	if (USE_MARSHAL) then
		RegisterScriptCallback("save_state",save_state)
		RegisterScriptCallback("load_state",load_state)
	end
end
----// add to bind_stalker or bind_stalker_ext save/load if used. //--
function save(package)	-- sleep_dep.save -> actor_binder:save()
	if (USE_MARSHAL) then
		return
	end
	package:w_u16(last_sleep)
	package:w_u16(last_chk)
end
function load(package)	-- sleep_dep.load -> actor_binder:load()
	if (USE_MARSHAL) then
		return
	end
	last_sleep  = package:r_u16()
	last_chk 	= package:r_u16()
end
--//--------------------------------------------------------------//--
function save_state(m_data)
	if (USE_MARSHAL) then
		if last_sleep > 0 or last_chk > 0 then
			m_data.sleep_deprived = m_data.sleep_deprived or {}
			m_data.sleep_deprived["last_sleep"] = last_sleep
			m_data.sleep_deprived["chk"] = last_chk
		else
			m_data.sleep_deprived = nil
		end
	end
end

function load_state(m_data)
	if (USE_MARSHAL) then
		last_sleep = m_data.sleep_deprived and m_data.sleep_deprived.last_sleep or 0
		last_chk = m_data.sleep_deprived and m_data.sleep_deprived.chk or 0
	end
end

function actor_on_item_use(item)
	for i,j in pairs(items) do
		if item:section() == i then
			last_sleep = last_sleep + j
			test_blur()
			break
		end
	end
end

function actor_on_first_update()
	if last_sleep > start_blur then
		level.add_pp_effector("yantar_underground_psi.ppe", 999, true)
		level.set_pp_effector_factor(999, (last_sleep-start_blur) * itn_mul)
		SetHudMsg(game.translate_string("st_sleep_exhausted"),5)
	end
end

function actor_on_update(b,d)
	if (axr_main and axr_main.config)
	  and not (axr_main.config:GetValue("mm_options","enable_sleep_deprived",1,false)) then
		last_sleep = no_sleep
		return
	end
	if db.actor:has_info("actor_is_sleeping") then
		last_sleep = 0
		level.remove_pp_effector(999)
	end
	if (last_chk) > 0 then
		last_chk = last_chk - (d*level.get_time_factor())
		return
	end
	last_chk = 3600*1000
	last_sleep = last_sleep + 1
	test_blur()
end

function test_blur()
	level.remove_pp_effector(999)
	if last_sleep > force then
		force_sleep()
	elseif last_sleep > start_blur then
		level.add_pp_effector("yantar_underground_psi.ppe", 999, true)
		level.set_pp_effector_factor(999, (last_sleep-start_blur) * itn_mul)
		SetHudMsg(game.translate_string("st_sleep_exhausted"),5)
	end
end

function force_sleep()
	ui_sleep_dialog.sleep_forced()
	if math.random() < die_chance then
		SetHudMsg(game.translate_string("st_sleep_deprived"),5)
		db.actor:kill(db.actor)
	end
end
-- run_string log("----->"..tostring(xr_statistic.actor_statistic.best_monster).." "..tostring(xr_statistic.actor_statistic.best_monster_rank))
-- Modified by Alundaio

actor_statistic = {
					surges = 0,
					completed_quests = 0,
					killed_monsters = 0,
					killed_stalkers = 0,
					founded_secrets = 0,
					artefacts_founded = 0,
					best_monster = nil,
					favorite_weapon_sect = nil,
					best_monster_rank = 0,
					}

monster_classes = {
			[clsid.bloodsucker_s] 	  = "bloodsucker",
			[clsid.boar_s] 			  = "boar",
			[clsid.burer_s] 		  = "burer",
			[clsid.chimera_s] 		  = "chimera",
			[clsid.controller_s] 	  = "controller",
			[clsid.dog_s] 			  = "dog",
			[clsid.flesh_s] 		  = "flesh",
			[clsid.gigant_s] 		  = "gigant",
			[clsid.poltergeist_s] 	  = "poltergeist",
			[clsid.psy_dog_s] 		  = "psy_dog",
			[clsid.pseudodog_s]		  = "pseudodog",
			[clsid.snork_s ] 		  = "snork",
			[clsid.tushkano_s ] 	  = "tushkano",
			[clsid.cat_s]			  = "cat",
			[clsid.rat_s]			  = "rat",
			[clsid.rat]			  	  = "rat",
			[clsid.zombie_s]		  = "zombie",
			[clsid.fracture_s]		  = "fracture"
		}

weapons_table = {}

artefacts_table = {
	af_cristall = false,
	af_blood = false,
	af_electra_sparkler = false,
	af_cristall_flower = false,
	af_medusa = false,
	af_fireball = false,
	af_mincer_meat = false,
	af_electra_flash = false,
	af_night_star = false,
	af_dummy_glassbeads = false,
	af_soul = false,
	af_electra_moonlight = false,
	af_dummy_battery = false,
	af_vyvert = false,
	af_fuzz_kolobok = false,
	af_gravi = false,
	af_eye = false,
	af_baloon = false,
	af_dummy_dummy = false,
	af_gold_fish = false,
	af_fire = false,
	af_glass = false,
	af_ice = false,
}

taken_artefacts = {}


local function save_state(data)
	if not (data.xr_statistic) then
		data.xr_statistic = {}
	end

	data.xr_statistic.actor_statistic = actor_statistic
	data.xr_statistic.artefacts_table = artefacts_table
	data.xr_statistic.taken_artefacts = taken_artefacts
	data.xr_statistic.weapons_table = weapons_table
end

local function load_state(data)
	if not (data.xr_statistic) then
		return
	end

	actor_statistic = data.xr_statistic.actor_statistic or actor_statistic
	artefacts_table = data.xr_statistic.artefacts_table or artefacts_table
	taken_artefacts = data.xr_statistic.taken_artefacts or taken_artefacts
	weapons_table = data.xr_statistic.weapons_table or weapons_table

	data.xr_statistic = nil
end

function on_game_start()
	if not (USE_MARSHAL) then
		return
	end
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end


function inc_surges_counter()
	actor_statistic.surges = actor_statistic.surges + 1
end
function inc_completed_quests_counter()
	actor_statistic.completed_quests = actor_statistic.completed_quests + 1
end
function inc_killed_monsters_counter()
	actor_statistic.killed_monsters = actor_statistic.killed_monsters + 1
end
function inc_killed_stalkers_counter()
	actor_statistic.killed_stalkers = actor_statistic.killed_stalkers + 1
end
function inc_founded_artefacts_counter(art_id)
	if(taken_artefacts[art_id]==nil) then
		actor_statistic.artefacts_founded = actor_statistic.artefacts_founded + 1
		taken_artefacts[art_id] = art_id
		local s_art = alife():object(art_id)
		if(s_art and s_art:section_name()) then
			artefacts_table[s_art:section_name()] = true
		end
	end
end
function inc_founded_secrets_counter()
	actor_statistic.founded_secrets = actor_statistic.founded_secrets + 1
end

function set_best_monster(obj)
	if not IsMonster(obj) then
		return 
	end
	local community = monster_classes[get_clsid(obj)]
	if not(community) then
		printf("Statistic ERROR: cannot find monster class for [%s] clsid [%s]", obj:name(), tostring(get_clsid(obj)))
		return
	end
	local s_obj = alife():object(obj:id())
	if(s_obj) then
		local rank = s_obj:rank()
		if(community=="flesh") then
			if(rank==3) then
				community = community.."_strong"
			else
				community = community.."_weak"
			end
		elseif(community=="poltergeist") then
			if(rank==12) then
				community = community.."_flame"
			else
				community = community.."_tele"
			end
		elseif(community=="boar") then
			if(rank==6) then
				community = community.."_strong"
			else
				community = community.."_weak"
			end
		elseif(community=="pseudodog" or community=="psy_dog") then
			if(rank==13) then
				community = community.."_strong"
			else
				community = community.."_weak"
			end
		elseif(community=="bloodsucker") then
			if(rank==16) then
				community = community.."_strong"
			elseif(rank==15) then
				community = community.."_normal"
			else
				community = community.."_weak"
			end
		end
		if(rank>actor_statistic.best_monster_rank) then
			actor_statistic.best_monster_rank = rank
			actor_statistic.best_monster = community
		end
	end
end

function set_best_weapon(hit_amount)
	local active_item = db.actor:active_item()
	if not (active_item) then
		return
	end

	if not (IsWeapon(active_item)) then
		return
	end

	weapons_table[active_item:section()] = weapons_table[active_item:section()] and weapons_table[active_item:section()] + hit_amount or hit_amount

	for sec,v in spairs(weapons_table, function(t,a,b) return t[b] < t[a] end) do
		actor_statistic.favorite_weapon_sect = sec
		return
	end	
end

function save(package)
	if (USE_MARSHAL) then
		return
	end
	package:w_u16(actor_statistic.surges)
	package:w_u16(actor_statistic.completed_quests)
	package:w_u32(actor_statistic.killed_monsters)
	package:w_u32(actor_statistic.killed_stalkers)
	package:w_u16(actor_statistic.founded_secrets)
	package:w_u16(actor_statistic.artefacts_founded)
	package:w_u32(actor_statistic.best_monster_rank)
	package:w_stringZ(tostring(actor_statistic.best_monster))
	package:w_stringZ(tostring(actor_statistic.favorite_weapon_sect))
	local i = 0
	for k,v in pairs(weapons_table) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(weapons_table) do
		package:w_stringZ(tostring(k))
		package:w_float(v)
	end
	i = 0
	for k,v in pairs(artefacts_table) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(artefacts_table) do
		package:w_stringZ(tostring(k))
		package:w_bool(v)
	end
	i = 0
	for k,v in pairs(taken_artefacts) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(taken_artefacts) do
		package:w_u32(k)
	end
end

function load(package)
	if (USE_MARSHAL) then
		return
	end
	actor_statistic = {}
	actor_statistic.surges  			= package:r_u16()
	actor_statistic.completed_quests 	= package:r_u16()
	actor_statistic.killed_monsters  	= package:r_u32()
	actor_statistic.killed_stalkers  	= package:r_u32()
	actor_statistic.founded_secrets  	= package:r_u16()
	actor_statistic.artefacts_founded	= package:r_u16()
	actor_statistic.best_monster_rank 	= package:r_u32()
	local str = package:r_stringZ()
	if(str~="nil") then
		actor_statistic.best_monster = str
	end
	str = package:r_stringZ()
	if(str~="nil") then
		actor_statistic.favorite_weapon_sect = str
	end
	weapons_table = {}
	local n = package:r_u16()
	for i = 1,n do
		local k = package:r_stringZ()
		local v = package:r_float()
		weapons_table[k] = v
	end
	artefacts_table = {}
	n = package:r_u16()
	for i = 1,n do
		log("n "..tostring(n))
		local k = package:r_stringZ()
		local v = package:r_bool()
		artefacts_table[k] = v
	end

		taken_artefacts = {}
	n = package:r_u16()
	for i = 1,n do
		local k = package:r_u32()
		taken_artefacts[k] = k
	end
end

function wealthy_functor()
	if db.actor:money() >= 1000000 and not has_alife_info("actor_wealthy") then
		db.actor:give_info_portion("actor_wealthy")
		news_manager.send_tip(db.actor, "st_ach_wealthy", nil, "wealthy", nil, nil)
	end
	return has_alife_info("actor_wealthy")
end

function marked_by_zone_functor()
	if has_alife_info("actor_marked_by_zone_3_times") then
		return true
	end
	if (character_community(db.actor) == "actor_monolith") then 
		return true 
	end
	local counter_name = "actor_marked_by_zone_cnt"
	local cnt_value = xr_logic.pstor_retrieve(db.actor, counter_name, 0)
	if cnt_value > 2 then
		db.actor:give_info_portion("actor_marked_by_zone_3_times")
		news_manager.send_tip(db.actor, "st_ach_marked_by_zone", nil, "marked_by_zone", nil, nil)
		return true
	end
	return false
end

-- TODO: revamp to use with information brokers
function information_dealer_functor()
	if has_alife_info("actor_information_dealer") then
		return true
	end
end

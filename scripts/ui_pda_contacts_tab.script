---------------------------------
----- Written by Darryl123 ------
---------------------------------

-- Column and row limits.
local column_limit = 5
local row_limit = 10

-- Constructor.
UIContacts = nil
class "pda_contacts_tab" (CUIScriptWnd)
function pda_contacts_tab:__init() super()
	self.contact_info = {}
	self:InitControls()
	self:Reset()
end

-- Initialise the interface.
function pda_contacts_tab:InitControls()
	self:SetWndRect(Frect():set(0, 0, 1024, 768))
	
	local xml = CScriptXmlInit()
	xml:ParseFile("pda_contacts.xml")
	xml:InitFrame("frame", self)
	
	self.listbox = xml:InitListBox("listbox", self)
	self.listbox:SetItemHeight(140)
	self:Register(self.listbox, "listbox")
	for i = 1, row_limit do
		self.listbox:AddExistingItem(ui_contact_row(self, i, xml))
	end
end

-- Reset the interface.
function pda_contacts_tab:Reset()
	-- Miscellaneous variables.
	local index = 1
	local distance = 0
	local radius = 0
	
	-- Stalker information.
	local stalker = nil
	local stalker_comm = nil
	local stalker_icon = nil
	local stalker_name = nil
	local stalker_rank = nil
	local stalker_rept = nil
	
	-- Retrieve the detection radius used by contact counter.
	radius = system_ini():r_string_ex("device_pda", "radius") or 68
	
	-- Return if index exceeds maximum number of slots.
	if (index > (column_limit * row_limit)) then return end
		
	-- Erase all pre-existing information.
	for i = 1, (column_limit * row_limit) do
		if (self.contact_info[i]) then
			self.contact_info[i].comm_field:SetText("")
			self.contact_info[i].comm_label:SetText("")
			self.contact_info[i].icon_field:Show(false)
			self.contact_info[i].name_field:SetText("")
			self.contact_info[i].rank_field:SetText("")
			self.contact_info[i].rept_field:SetText("")
			self.contact_info[i].rept_label:SetText("")
		end
	end
		
	
	-- Loop through all currently online stalkers.
	for i = 1, #db.OnlineStalkers do
		stalker = db.storage[db.OnlineStalkers[i]]
		stalker = stalker and stalker.object or level.object_by_id(db.OnlineStalkers[i])
		if (stalker and IsStalker(stalker) and stalker:alive()) then
			-- Display stalkers who are within the PDA contact radius.
			distance = db.actor:position():distance_to_sqr(stalker:position())
			if (distance <= (radius * radius)) then
				-- Retrieve required information.
				stalker_comm = character_community(stalker)
				stalker_icon = stalker:character_icon()
				stalker_name = stalker:character_name()
				stalker_rank = ranks.get_se_obj_rank_name(stalker)
				stalker_rept = alun_utils.get_reputation_name(stalker:character_reputation())
				
				stalker_icon = stalker_icon and stalker_icon ~= "" and stalker_icon or "ui\\ui_noise"
				self.contact_info[index].icon_field:InitTexture(stalker_icon)
				self.contact_info[index].icon_field:Show(true)
				
				stalker_name = string.len(stalker_name) <= 20 and stalker_name or string.sub(stalker_name, 0, 17) .. "..."
				self.contact_info[index].name_field:SetText(stalker_name)
				
				self.contact_info[index].comm_label:SetText("Faction: ")
				self.contact_info[index].rept_label:SetText("Reputation: ")
				
				self.contact_info[index].comm_field:SetText(game.translate_string(stalker_comm))
				self.contact_info[index].rank_field:SetText("Rank: " .. game.translate_string("st_rank_" .. stalker_rank))
				self.contact_info[index].rept_field:SetText(game.translate_string(stalker_rept))
				
				-- Display relation by colouring the stalker's faction name appropriately.
				if (xr_conditions.is_factions_friends(nil, nil, { stalker_comm, character_community(db.actor) })) then
					self.contact_info[index].comm_field:SetTextColor(GetARGB(255,1,255,1))
				elseif (xr_conditions.is_factions_enemies(nil, nil, { stalker_comm, character_community(db.actor) })) then
					self.contact_info[index].comm_field:SetTextColor(GetARGB(255,255,1,1))
				else 
					self.contact_info[index].comm_field:SetTextColor(GetARGB(255,255,255,1))
				end
				
				-- Display reputation status (whether it's good or bad) by colouring the text.
				if (stalker:character_reputation() >= 500) then
					self.contact_info[index].rept_field:SetTextColor(GetARGB(255,1,255,1))
				elseif (stalker:character_reputation() <= -500) then
					self.contact_info[index].rept_field:SetTextColor(GetARGB(255,255,1,1))
				else
					self.contact_info[index].rept_field:SetTextColor(GetARGB(255,255,255,1))
				end
				
				-- Increment index by one.
				index = index + 1
			end
		end
	end
end

-----

-- Row constructor.
class "ui_contact_row" (CUIListBoxItem)
function ui_contact_row:__init(parent, row, xml) super(parent, row, xml)
	self:GetTextItem():SetText("")
	self:SetWndSize(vector2():set(740, 140))

	local index = 0
	local is_widescreen = utils.is_widescreen()
	local offset_comm = is_widescreen and 36 or 49
	local offset_rept = is_widescreen and 51 or 68
	local x = is_widescreen and 40 or 55
	
	-- Five stalkers are listed on each row.
	-- Create the components for each info slot.
	for i = 1, column_limit do
		-- Calculate the index for each entry.
		index = i + (5 * (row - 1))
		
		-- Create the components for each entry.
		parent.contact_info[index] = {
			["comm_field"] = self:AddTextField("", 1),
			["comm_label"] = self:AddTextField("", 1),
			["icon_field"] = self:AddIconField(1),
			["name_field"] = self:AddTextField("", 1),
			["rept_label"] = self:AddTextField("", 1),
			["rept_field"] = self:AddTextField("", 1),
			["rank_field"] = self:AddTextField("", 1),
		}
		
		parent.contact_info[index].icon_field:InitTexture("ui\\ui_noise")
		parent.contact_info[index].icon_field:SetStretchTexture(true)
		parent.contact_info[index].icon_field:SetWndSize(vector2():set(64, 64))
		parent.contact_info[index].icon_field:SetWndPos(vector2():set(x, 0))
		
		parent.contact_info[index].name_field:SetFont(GetFontLetterica16Russian())
		parent.contact_info[index].name_field:SetWndSize(vector2():set(120, 20))
		parent.contact_info[index].name_field:SetWndPos(vector2():set(x, 65))
		
		parent.contact_info[index].rank_field:SetFont(GetFontLetterica16Russian())
		parent.contact_info[index].rank_field:SetWndSize(vector2():set(120, 20))
		parent.contact_info[index].rank_field:SetWndPos(vector2():set(x, 80))
		
		parent.contact_info[index].rept_label:SetFont(GetFontLetterica16Russian())
		parent.contact_info[index].rept_label:SetWndSize(vector2():set(120, 20))
		parent.contact_info[index].rept_label:SetWndPos(vector2():set(x, 95))
		
		parent.contact_info[index].rept_field:SetFont(GetFontLetterica16Russian())
		parent.contact_info[index].rept_field:SetWndSize(vector2():set(120, 20))
		parent.contact_info[index].rept_field:SetWndPos(vector2():set(x + offset_rept, 95))
		
		parent.contact_info[index].comm_label:SetFont(GetFontLetterica16Russian())
		parent.contact_info[index].comm_label:SetWndSize(vector2():set(120, 20))
		parent.contact_info[index].comm_label:SetWndPos(vector2():set(x, 110))
		
		parent.contact_info[index].comm_field:SetFont(GetFontLetterica16Russian())
		parent.contact_info[index].comm_field:SetWndSize(vector2():set(120, 20))
		parent.contact_info[index].comm_field:SetWndPos(vector2():set(x + offset_comm, 110))
		
		x = x + (is_widescreen and 150 or 180)
	end
end
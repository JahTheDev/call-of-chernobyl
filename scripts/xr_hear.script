
local function get_sound_type(sound_type)
	local t1 = {
		weapon = 'WPN',
		item = 'ITM',
		monster = 'MST',
		step = 'NPC_step'
	}
	local t2 = {
		weapon = {
			weapon_shoot = 'shoot',
			weapon_empty = 'empty',
			weapon_bullet_hit = 'hit',
			weapon_reload = 'reload',
			[-1065353216] = 'show',
			[-1056964608] = 'hide',
		},
		item = {
			item_pick_up = 'pckup',
			item_drop = 'drop',
			item_hide = 'hide',
			item_take = 'take',
			item_use = 'use',
		},
		monster = {
			monster_die = 'die',
			monster_injure = 'damage',
			monster_step = 'step',
			monster_talk = 'talk',
			monster_attack = 'attack',
			monster_eat = 'eat',
		},
		step = {
			-- empty
		}
	}
	local function check_bit_and(snd_type_name)
		if bit_and(sound_type, snd_type_name) == snd_type_name then
			return true
		end
	end
	local s_type = "NIL"
	for k, v in pairs(t2) do
		if check_bit_and(k) then
			s_type = t1[snd_type[k]]
			for kk, vv in pairs(v) do
				if check_bit_and(snd_type[kk]) then
					s_type = s_type..vv
					break
				end
			end
			break
		end
	end
	return s_type
end

function reset_hear_callback(st, section)
	local ini = st.ini
	if (ini == nil or not ini:section_exist(section)) then
		return
	end
 	local n = ini:line_count(section)
	st.hear_sounds = {}
	for i=0,n-1 do
		local result, id, value  = ini:r_line(section,i,"","")
		if (string.find(id, "^on_sound%d*$") ~= nil) then
			local parsed_params = utils.parse_params(value)
			local st_hear_sounds = st.hear_sounds
			local parsed_params_1 = parsed_params[1]
			st_hear_sounds[parsed_params_1] = st_hear_sounds[parsed_params_1] or {}
			st_hear_sounds[parsed_params_1][parsed_params[2]] = {	dist = tonumber(parsed_params[3]),
																	power = tonumber(parsed_params[4]),
																	condlist = xr_logic.parse_condlist(st.object, "hear_callback", "hear_callback", parsed_params[5])}
		end
	end
end

function hear_callback(obj, who_id, sound_type, sound_position, sound_power)
	local st = db.storage[obj:id()]
	local s_type = get_sound_type(sound_type)
	local obj_pos = obj:position()
	local sound_dist = sound_position:distance_to_sqr(obj_pos)
	--Alundaio
	SendScriptCallback("npc_on_hear_callback",obj,who_id,s_type,sound_dist,sound_power,sound_position)
	--Alundaio
	local story_id = get_object_story_id(who_id) or "any"
	local st_hear_sounds = st.hear_sounds
	if st_hear_sounds == nil then
		return
	end
	local st_hear_sounds_story_id = st_hear_sounds[story_id]
	local st_hear_sounds_story_id_s_type = st_hear_sounds_story_id and st_hear_sounds_story_id[s_type]
	if st_hear_sounds_story_id_s_type and st_hear_sounds_story_id_s_type.dist >= sound_position:distance_to(obj_pos) and sound_power >= st_hear_sounds_story_id_s_type.power then
		local new_section = xr_logic.pick_section_from_condlist(db.actor, obj, st_hear_sounds_story_id_s_type.condlist)
		if new_section ~= nil and new_section ~= "" then
			xr_logic.switch_to_section(obj, st.ini, new_section)
		elseif new_section == "" then
			st_hear_sounds_story_id[s_type] = nil
		end
	end
end

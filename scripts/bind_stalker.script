function init(obj)
	xr_motivator.AddToMotivator(obj)
end

function actor_init(npc)
	npc:bind_object(actor_binder(npc))
end

----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init (obj) super(obj)
	self.bCheckStart = false
	self.last_level_name = "nil"
	self.deimos_intensity = nil

	self.last_detective_achievement_spawn_time 	= nil
	self.last_mutant_hunter_achievement_spawn_time	= nil

	bind_stalker_ext.actor_on_init(self)
	
	self.weather_manager = level_weathers.get_weather_manager()
end

----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
	--printf("actor net spawn")
	level.show_indicators()
	self.bCheckStart = true
	self.weapon_hide = false -- спрятано или нет оружие при разговоре.
	self.weapon_hide_in_dialog = false

	if object_binder.net_spawn(self,data) == false then
		return false
	end
	db.add_actor(self.object)
	db.add_enemy(self.object)

	db.actor.deimos_intensity = self.deimos_intensity
	self.deimos_intensity = nil
	if self.st.disable_input_time == nil then
		level.enable_input()
	end

	death_manager.init_drop_settings()
	self.task_manager = task_manager.get_task_manager()
	self.spawn_frame = device().frame
	self.already_jumped = false
	self.loaded = false

	bind_stalker_ext.actor_on_net_spawn(self)
	self.weather_manager:reset()
	
	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()
	xr_sound.stop_sounds_by_id(self.object:id())
	local board_factions = SIMBOARD.players
	if(board_factions) then
		for k,v in pairs (board_factions) do
			xr_sound.stop_sounds_by_id(v.id)
		end
	end
	if(actor_stats.remove_from_ranking~=nil)then
		actor_stats.remove_from_ranking(self.object:id())
	end
	level.show_weapon(true)
	db.del_actor(self.object)
	db.delete_enemy(self.object)

	-- remove callbacks
	local t = {
				-- vanilla
				callback.inventory_info,
				callback.on_item_take,
				callback.on_item_drop,
				callback.task_state,
				callback.trade_sell_buy_item,
				callback.take_item_from_box,
				callback.use_object,
				
				-- coc
				callback.hit,
				callback.key_press,
				callback.key_release,
				callback.actor_before_death,
				callback.on_attach_vehicle,
				callback.on_detach_vehicle,
				callback.on_use_vehicle,
				callback.weapon_jammed,
				callback.weapon_zoom_in,
				callback.weapon_zoom_out
	}
	for i=1,#t do 
		if (t[i]) then 
			self.object:set_callback(t[i])
		end
	end

	if(_G.amb_vol~=0) then
		get_console():execute("snd_volume_eff "..tostring(_G.amb_vol))
		_G.amb_vol = 0
	end
	if(_G.mus_vol~=0) then
	    get_console():execute("snd_volume_music "..tostring(_G.mus_vol))
		_G.mus_vol = 0
	end
	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:destroy()
		sr_psy_antenna.psy_antenna = false
	end
	
	bind_stalker_ext.actor_on_net_destroy(self)

	object_binder.net_destroy(self)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
	object_binder.reinit(self)
	local npc_id = self.object:id()
	db.storage[npc_id] = empty_table(db.storage[npc_id])
	self.st = db.storage[npc_id]

	
		local t = {
				-- vanilla
				["inventory_info"] 			= bind_stalker_ext.actor_on_info_callback,
				["on_item_take"] 			= bind_stalker_ext.actor_on_item_take,
				["on_item_drop"] 			= bind_stalker_ext.actor_on_item_drop,
				["task_state"] 				= bind_stalker_ext.actor_on_task_callback,
				["trade_sell_buy_item"]		= bind_stalker_ext.actor_on_item_drop,
				["take_item_from_box"]		= bind_stalker_ext.actor_on_item_take_from_box,
				["use_object"]				= bind_stalker_ext.actor_on_item_use,
				
				-- coc
				["hit"]						= bind_stalker_ext.actor_on_hit_callback,
				["key_press"]				= bind_stalker_ext.on_key_press,
				["key_release"]				= bind_stalker_ext.on_key_release,
				["actor_before_death"]		= bind_stalker_ext.actor_on_before_death,
				["on_attach_vehicle"]		= bind_stalker_ext.actor_on_attach_vehicle,
				["on_detach_vehicle"]		= bind_stalker_ext.actor_on_detach_vehicle,
				["on_use_vehicle"]			= bind_stalker_ext.actor_on_use_vehicle,
				["weapon_jammed"]			= bind_stalker_ext.actor_on_weapon_jammed,
				["weapon_zoom_in"]			= bind_stalker_ext.actor_on_weapon_zoom_in,
				["weapon_zoom_out"]			= bind_stalker_ext.actor_on_weapon_zoom_out
	}
	for cb,func in pairs(t) do 
		if (callback[cb] and func) then 
			self.object:set_callback(callback[cb],func,self)
		end
	end
end

function anabiotic_callback()
	level.add_cam_effector("camera_effects\\surge_01.anm", 10, false, "bind_stalker.anabiotic_callback2")
	local rnd = math.random(35,45)
	local m = surge_manager.SurgeManager
	if(m.started) then
		local tf = level.get_time_factor()
		local diff_sec = math.ceil(game.get_game_time():diffSec(m.inited_time)/tf)
			if(rnd>(m.surge_time-diff_sec)*tf/60) then
			m.time_forwarded = true
			m.ui_disabled = true
			m:kill_all_unhided()
			m:end_surge()
		end
	end
	m = psi_storm_manager and psi_storm_manager.PsiStormManager
	if(m and m.started) then
		local tf = level.get_time_factor()
		local diff_sec = math.ceil(game.get_game_time():diffSec(m.inited_time)/tf)
			if(rnd>(m.psi_storm_duration-diff_sec)*tf/60) then
			m.time_forwarded = true
			--m.ui_disabled = true
			m:finish()
		end
	end
	level.change_game_time(0,0,rnd)
	level_weathers.get_weather_manager():forced_weather_change()
	--printf("anabiotic_callback: time forwarded on [%d]", rnd)
end

function anabiotic_callback2()
	xr_effects.enable_ui(db.actor, nil)
    get_console():execute("snd_volume_music "..tostring(_G.mus_vol))
	get_console():execute("snd_volume_eff "..tostring(_G.amb_vol))
	_G.amb_vol = 0
	_G.mus_vol = 0
	disable_info("anabiotic_in_process")
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:update(delta)
	object_binder.update(self, delta)
	--alun_utils.debug_write("actor update START")
	--printf("actor update start")
	if not (db.actor:alive()) then
		return
	end
	
	if self.bCheckStart then -- first update after netspawn
		--printf("SET DEFAULT INFOS")
		if not has_alife_info("global_dialogs") then
			self.object:give_info_portion("global_dialogs")
		end
		if not has_alife_info("level_changer_icons") then
			self.object:give_info_portion("level_changer_icons")
		end
		pda.fill_primary_objects()
		self.object:activate_slot(self.loaded_active_slot)
		self.bCheckStart = false
	end
	
	self.task_manager:update()

	-- DEBUG slowdown
	--slowdown.update()
	
	game_stats.update (delta, self.object)

	-- апдейт погоды
	self.weather_manager:update()

	--' Апдейт саундменеджера
	xr_sound.update(self.object:id())

	-- Обновление отключения ввода с клавиатуры.
	if self.st.disable_input_time ~= nil and
		game.get_game_time():diffSec(self.st.disable_input_time) >= self.st.disable_input_idle
		then
		level.enable_input()
		self.st.disable_input_time = nil
	end

	-- Апдейт прятание оружия игрока во время диалога
	if self.object:is_talking() then
		if self.weapon_hide_in_dialog == false then
			self.object:hide_weapon()
			--printf("hiding weapon!!!")
			self.weapon_hide_in_dialog = true
		end
	else              
		if self.weapon_hide_in_dialog == true then
			--printf("restoring weapon!!!")
			self.object:restore_weapon()
			self.weapon_hide_in_dialog = false
		end
	end

	-- обновление пси-антенны
	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:update(delta)
	end

	-- Апдейт доступности для симуляции.
	simulation_objects.get_sim_obj_registry():update_avaliability(alife():actor())

	bind_stalker_ext.actor_on_update(self,delta)
	
	local tg = time_global()
	if (self.last_update and tg < self.last_update) then
		--printf("actor update end")
		return
	end
	self.last_update = tg + 3000

	pda.fill_sleep_zones()
	treasure_manager.get_treasure_manager():update()
	
	--printf("actor update end")
	--alun_utils.debug_write("actor update END")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
	--alun_utils.debug_write("--------------- actor_binder:save -------- Start")
	set_save_marker(packet, "save", false, "actor_binder")
	object_binder.save(self, packet)
	--' Сохраняем уровень сложности

	if (utils.level_changing()) then
		alun_utils.save_var(db.actor,"heli_enemy_flag",false)
	end
	
	--alundaio
	alun_utils.w_stpk(packet,"u8",level.get_game_difficulty(), "game difficulty")
	alun_utils.w_stpk(packet,"CTime",self.st.disable_input_time, "disable input time")

	xr_logic.pstor_save_all(self.object, packet)
	self.weather_manager:save(packet)
	release_body_manager.get_release_body_manager():save(packet)
	
	sr_psy_antenna.save( packet )

	alun_utils.w_stpk(packet,"bool",SIMBOARD.simulation_started, "sim started")

	xr_sound.actor_save(packet)
	alun_utils.w_stpk(packet,"stringZ",self.last_level_name,"last level name")
	xr_statistic.save(packet)
	treasure_manager.get_treasure_manager():save(packet)
	task_manager.get_task_manager():save(packet)
	packet:w_u8(self.object:active_slot())

	local deimos_exist = false
	for k,v in pairs(db.zone_by_name) do
		if(db.storage[v:id()] and db.storage[v:id()].active_scheme=="sr_deimos") then
			deimos_exist = true
			packet:w_bool(true)
			alun_utils.w_stpk(packet,"float",db.storage[v:id()].sr_deimos.intensity, "deimos.intensity")
		end
	end
	if not deimos_exist then
		packet:w_bool(false)
	end

	if self.last_detective_achievement_spawn_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		alun_utils.w_stpk(packet,"CTime",self.last_detective_achievement_spawn_time, "detective spawn time")
	end

	if self.last_mutant_hunter_achievement_spawn_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		alun_utils.w_stpk(packet,"CTime",self.last_mutant_hunter_achievement_spawn_time, "hunter spawn time")
	end

	bind_stalker_ext.actor_on_save(self,packet)

	set_save_marker(packet, "save", true, "actor_binder")
	--alun_utils.debug_write("--------------- actor_binder:save -------- End")
end

----------------------------------------------------------------------------------------------------------------------
function actor_binder:load(reader)
	set_save_marker(reader, "load", false, "actor_binder")
	object_binder.load(self, reader)

	local game_difficulty_by_num = {
				[0] = "gd_novice",
				[1] = "gd_stalker",
				[2] = "gd_veteran",
				[3] = "gd_master"
				}
	local dif = game_difficulty_by_num[reader:r_u8()]
	if not (dif) then
		set_save_marker(reader, "load", true, "actor_binder")
		return 
	end
	get_console():execute("g_game_difficulty "..dif)
	self.st.disable_input_time = utils.r_CTime(reader,"bind_stalker")

	xr_logic.pstor_load_all(self.object, reader)
	self.weather_manager:load(reader)
	release_body_manager.get_release_body_manager():load(reader)

	sr_psy_antenna.load(reader)
	SIMBOARD.simulation_started = reader:r_bool()

	xr_sound.actor_load(reader)
	local n = reader:r_stringZ()
	if(n~="nil") then
		self.last_level_name = n
	end
	xr_statistic.load(reader)
	treasure_manager.get_treasure_manager():load(reader)
	task_manager.get_task_manager():load(reader)

	self.loaded_active_slot = reader:r_u8()

	local b = reader:r_bool()
	if(b) then
		self.deimos_intensity = reader:r_float()
	end

	local stored_achievement_time = reader:r_bool()
	if stored_achievement_time == true then
		self.last_detective_achievement_spawn_time = utils.r_CTime(reader,"bind_stalker")
	end
	stored_achievement_time = reader:r_bool()
	if stored_achievement_time == true then
		self.last_mutant_hunter_achievement_spawn_time = utils.r_CTime(reader,"bind_stalker")
	end

	bind_stalker_ext.actor_on_load(self,reader)

	set_save_marker(reader, "load", true, "actor_binder")
end
